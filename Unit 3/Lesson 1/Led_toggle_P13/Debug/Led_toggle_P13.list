
Led_toggle_P13.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000278  08000278  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000278  08000278  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08000278  08000278  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000278  08000278  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000278  08000278  00010278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800027c  0800027c  0001027c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08000280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000008  08000288  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  08000288  00020028  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000da5  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000588  00000000  00000000  00020dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000190  00000000  00000000  00021360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  000214f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f54  00000000  00000000  00021650  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015d8  00000000  00000000  000225a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00078c8f  00000000  00000000  00023b7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009c80b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000002f0  00000000  00000000  0009c888  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000001fc  00000000  00000000  0009cb78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000008 	.word	0x20000008
 8000128:	00000000 	.word	0x00000000
 800012c:	08000260 	.word	0x08000260

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000000c 	.word	0x2000000c
 8000148:	08000260 	.word	0x08000260

0800014c <main>:

volatile R_ODR* PR_ORD=(R_ODR*)(GPIO_PA_BASE+0x0c);

int main(void)
{
	RCC_APB2ENR |=1<<2;
 800014c:	490c      	ldr	r1, [pc, #48]	; (8000180 <main+0x34>)
	GPIOA_CRH &=0xff0fffff;
 800014e:	4b0d      	ldr	r3, [pc, #52]	; (8000184 <main+0x38>)
	RCC_APB2ENR |=1<<2;
 8000150:	680a      	ldr	r2, [r1, #0]
	GPIOA_CRH |=0x00200000;
	while(1)
	{
		PR_ORD->pin.p13=1;
 8000152:	480d      	ldr	r0, [pc, #52]	; (8000188 <main+0x3c>)
	RCC_APB2ENR |=1<<2;
 8000154:	f042 0204 	orr.w	r2, r2, #4
 8000158:	600a      	str	r2, [r1, #0]
	GPIOA_CRH &=0xff0fffff;
 800015a:	681a      	ldr	r2, [r3, #0]
 800015c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000160:	601a      	str	r2, [r3, #0]
	GPIOA_CRH |=0x00200000;
 8000162:	681a      	ldr	r2, [r3, #0]
 8000164:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000168:	601a      	str	r2, [r3, #0]
		PR_ORD->pin.p13=1;
 800016a:	6803      	ldr	r3, [r0, #0]
 800016c:	881a      	ldrh	r2, [r3, #0]
 800016e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000172:	801a      	strh	r2, [r3, #0]
		int i;
		for(i=0;i<5000;++i);
		PR_ORD->pin.p13=0;
 8000174:	881a      	ldrh	r2, [r3, #0]
 8000176:	f36f 324d 	bfc	r2, #13, #1
 800017a:	801a      	strh	r2, [r3, #0]
 800017c:	e7f6      	b.n	800016c <main+0x20>
 800017e:	bf00      	nop
 8000180:	40021018 	.word	0x40021018
 8000184:	40010804 	.word	0x40010804
 8000188:	20000000 	.word	0x20000000

0800018c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop

08000190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000190:	e7fe      	b.n	8000190 <HardFault_Handler>
 8000192:	bf00      	nop

08000194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000194:	e7fe      	b.n	8000194 <MemManage_Handler>
 8000196:	bf00      	nop

08000198 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000198:	e7fe      	b.n	8000198 <BusFault_Handler>
 800019a:	bf00      	nop

0800019c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800019c:	e7fe      	b.n	800019c <UsageFault_Handler>
 800019e:	bf00      	nop

080001a0 <SVC_Handler>:
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop

080001a4 <DebugMon_Handler>:
 80001a4:	4770      	bx	lr
 80001a6:	bf00      	nop

080001a8 <PendSV_Handler>:
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop

080001ac <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80001ac:	f000 b828 	b.w	8000200 <HAL_IncTick>

080001b0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop

080001b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001b4:	480c      	ldr	r0, [pc, #48]	; (80001e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80001b6:	490d      	ldr	r1, [pc, #52]	; (80001ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80001b8:	4a0d      	ldr	r2, [pc, #52]	; (80001f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80001ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001bc:	e002      	b.n	80001c4 <LoopCopyDataInit>

080001be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001c2:	3304      	adds	r3, #4

080001c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001c8:	d3f9      	bcc.n	80001be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001ca:	4a0a      	ldr	r2, [pc, #40]	; (80001f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80001cc:	4c0a      	ldr	r4, [pc, #40]	; (80001f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80001ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001d0:	e001      	b.n	80001d6 <LoopFillZerobss>

080001d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001d4:	3204      	adds	r2, #4

080001d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001d8:	d3fb      	bcc.n	80001d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001da:	f7ff ffe9 	bl	80001b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001de:	f000 f81b 	bl	8000218 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001e2:	f7ff ffb3 	bl	800014c <main>
  bx lr
 80001e6:	4770      	bx	lr
  ldr r0, =_sdata
 80001e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001ec:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 80001f0:	08000280 	.word	0x08000280
  ldr r2, =_sbss
 80001f4:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 80001f8:	20000028 	.word	0x20000028

080001fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001fc:	e7fe      	b.n	80001fc <ADC1_2_IRQHandler>
	...

08000200 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000200:	4a03      	ldr	r2, [pc, #12]	; (8000210 <HAL_IncTick+0x10>)
 8000202:	4b04      	ldr	r3, [pc, #16]	; (8000214 <HAL_IncTick+0x14>)
 8000204:	6811      	ldr	r1, [r2, #0]
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	440b      	add	r3, r1
 800020a:	6013      	str	r3, [r2, #0]
}
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	20000024 	.word	0x20000024
 8000214:	20000004 	.word	0x20000004

08000218 <__libc_init_array>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	2500      	movs	r5, #0
 800021c:	4e0c      	ldr	r6, [pc, #48]	; (8000250 <__libc_init_array+0x38>)
 800021e:	4c0d      	ldr	r4, [pc, #52]	; (8000254 <__libc_init_array+0x3c>)
 8000220:	1ba4      	subs	r4, r4, r6
 8000222:	10a4      	asrs	r4, r4, #2
 8000224:	42a5      	cmp	r5, r4
 8000226:	d109      	bne.n	800023c <__libc_init_array+0x24>
 8000228:	f000 f81a 	bl	8000260 <_init>
 800022c:	2500      	movs	r5, #0
 800022e:	4e0a      	ldr	r6, [pc, #40]	; (8000258 <__libc_init_array+0x40>)
 8000230:	4c0a      	ldr	r4, [pc, #40]	; (800025c <__libc_init_array+0x44>)
 8000232:	1ba4      	subs	r4, r4, r6
 8000234:	10a4      	asrs	r4, r4, #2
 8000236:	42a5      	cmp	r5, r4
 8000238:	d105      	bne.n	8000246 <__libc_init_array+0x2e>
 800023a:	bd70      	pop	{r4, r5, r6, pc}
 800023c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000240:	4798      	blx	r3
 8000242:	3501      	adds	r5, #1
 8000244:	e7ee      	b.n	8000224 <__libc_init_array+0xc>
 8000246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800024a:	4798      	blx	r3
 800024c:	3501      	adds	r5, #1
 800024e:	e7f2      	b.n	8000236 <__libc_init_array+0x1e>
 8000250:	08000278 	.word	0x08000278
 8000254:	08000278 	.word	0x08000278
 8000258:	08000278 	.word	0x08000278
 800025c:	0800027c 	.word	0x0800027c

08000260 <_init>:
 8000260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000262:	bf00      	nop
 8000264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000266:	bc08      	pop	{r3}
 8000268:	469e      	mov	lr, r3
 800026a:	4770      	bx	lr

0800026c <_fini>:
 800026c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800026e:	bf00      	nop
 8000270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000272:	bc08      	pop	{r3}
 8000274:	469e      	mov	lr, r3
 8000276:	4770      	bx	lr
