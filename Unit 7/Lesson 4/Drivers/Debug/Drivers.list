
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08000ee4  08000ee4  00010ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f0c  08000f0c  00010f14  2**0
                  CONTENTS
  4 .ARM          00000000  08000f0c  08000f0c  00010f14  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f0c  08000f14  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f0c  08000f0c  00010f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f10  08000f10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000f14  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000f14  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f14  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003367  00000000  00000000  00010f3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000867  00000000  00000000  000142a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000009a0  00000000  00000000  00014b0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  000154b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00015650  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000239d  00000000  00000000  000157a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001cd5  00000000  00000000  00017b45  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000994c  00000000  00000000  0001981a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023166  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000520  00000000  00000000  000231e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000ecc 	.word	0x08000ecc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000ecc 	.word	0x08000ecc

08000170 <main>:
void wait(uint32_t time);
void EXTI9_callback(void);

uint8_t EXTI_flag = 0;
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	clock_init();
 8000176:	f000 f827 	bl	80001c8 <clock_init>
	LCD_init();
 800017a:	f000 f97b 	bl	8000474 <LCD_init>
	LCD_clear_screen();
 800017e:	f000 f8b0 	bl	80002e2 <LCD_clear_screen>

	EXTI__PIN_Config_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTIPB9 ;
 8000182:	4a0e      	ldr	r2, [pc, #56]	; (80001bc <main+0x4c>)
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	ca07      	ldmia	r2, {r0, r1, r2}
 8000188:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING ;
 800018c:	2300      	movs	r3, #0
 800018e:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_callback ;
 8000190:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <main+0x50>)
 8000192:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN =EXTI_IRQ_ENABLE ;
 8000194:	2300      	movs	r3, #0
 8000196:	747b      	strb	r3, [r7, #17]

	EXTI_GPIO_Init(&EXTI_CFG);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4618      	mov	r0, r3
 800019c:	f000 fd70 	bl	8000c80 <EXTI_GPIO_Init>
	EXTI_flag=1;
 80001a0:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x54>)
 80001a2:	2201      	movs	r2, #1
 80001a4:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(EXTI_flag)
 80001a6:	4b07      	ldr	r3, [pc, #28]	; (80001c4 <main+0x54>)
 80001a8:	781b      	ldrb	r3, [r3, #0]
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d0fb      	beq.n	80001a6 <main+0x36>
		{
			LCD_clear_screen() ;
 80001ae:	f000 f898 	bl	80002e2 <LCD_clear_screen>
			EXTI_flag = 0;
 80001b2:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <main+0x54>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	701a      	strb	r2, [r3, #0]
		if(EXTI_flag)
 80001b8:	e7f5      	b.n	80001a6 <main+0x36>
 80001ba:	bf00      	nop
 80001bc:	08000ee4 	.word	0x08000ee4
 80001c0:	08000235 	.word	0x08000235
 80001c4:	2000001c 	.word	0x2000001c

080001c8 <clock_init>:
	}

}

void clock_init()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN() 	;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <clock_init+0x30>)
 80001ce:	699b      	ldr	r3, [r3, #24]
 80001d0:	4a09      	ldr	r2, [pc, #36]	; (80001f8 <clock_init+0x30>)
 80001d2:	f043 0304 	orr.w	r3, r3, #4
 80001d6:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN() 	;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <clock_init+0x30>)
 80001da:	699b      	ldr	r3, [r3, #24]
 80001dc:	4a06      	ldr	r2, [pc, #24]	; (80001f8 <clock_init+0x30>)
 80001de:	f043 0308 	orr.w	r3, r3, #8
 80001e2:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN()	;
 80001e4:	4b04      	ldr	r3, [pc, #16]	; (80001f8 <clock_init+0x30>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a03      	ldr	r2, [pc, #12]	; (80001f8 <clock_init+0x30>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6193      	str	r3, [r2, #24]

}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	bc80      	pop	{r7}
 80001f6:	4770      	bx	lr
 80001f8:	40021000 	.word	0x40021000

080001fc <wait>:


void wait(uint32_t time)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b085      	sub	sp, #20
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0;i<time;i++)
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
 8000208:	e00b      	b.n	8000222 <wait+0x26>
		for(j=0;j<255;j++);
 800020a:	2300      	movs	r3, #0
 800020c:	60bb      	str	r3, [r7, #8]
 800020e:	e002      	b.n	8000216 <wait+0x1a>
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	3301      	adds	r3, #1
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
 8000218:	2bfe      	cmp	r3, #254	; 0xfe
 800021a:	d9f9      	bls.n	8000210 <wait+0x14>
	for(i=0;i<time;i++)
 800021c:	68fb      	ldr	r3, [r7, #12]
 800021e:	3301      	adds	r3, #1
 8000220:	60fb      	str	r3, [r7, #12]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	429a      	cmp	r2, r3
 8000228:	d3ef      	bcc.n	800020a <wait+0xe>
}
 800022a:	bf00      	nop
 800022c:	3714      	adds	r7, #20
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr

08000234 <EXTI9_callback>:

void EXTI9_callback(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	EXTI_flag = 1;
 8000238:	4b05      	ldr	r3, [pc, #20]	; (8000250 <EXTI9_callback+0x1c>)
 800023a:	2201      	movs	r2, #1
 800023c:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is happened _|-  ") ;
 800023e:	4805      	ldr	r0, [pc, #20]	; (8000254 <EXTI9_callback+0x20>)
 8000240:	f000 fa38 	bl	80006b4 <LCD_WRITE_STRING>
	wait(1000);
 8000244:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000248:	f7ff ffd8 	bl	80001fc <wait>

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	2000001c 	.word	0x2000001c
 8000254:	08000ef0 	.word	0x08000ef0

08000258 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000258:	480d      	ldr	r0, [pc, #52]	; (8000290 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800025c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000260:	480c      	ldr	r0, [pc, #48]	; (8000294 <LoopForever+0x6>)
  ldr r1, =_edata
 8000262:	490d      	ldr	r1, [pc, #52]	; (8000298 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000264:	4a0d      	ldr	r2, [pc, #52]	; (800029c <LoopForever+0xe>)
  movs r3, #0
 8000266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000268:	e002      	b.n	8000270 <LoopCopyDataInit>

0800026a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800026c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800026e:	3304      	adds	r3, #4

08000270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000274:	d3f9      	bcc.n	800026a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000278:	4c0a      	ldr	r4, [pc, #40]	; (80002a4 <LoopForever+0x16>)
  movs r3, #0
 800027a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800027c:	e001      	b.n	8000282 <LoopFillZerobss>

0800027e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800027e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000280:	3204      	adds	r2, #4

08000282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000284:	d3fb      	bcc.n	800027e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000286:	f000 fdfd 	bl	8000e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028a:	f7ff ff71 	bl	8000170 <main>

0800028e <LoopForever>:

LoopForever:
    b LoopForever
 800028e:	e7fe      	b.n	800028e <LoopForever>
  ldr   r0, =_estack
 8000290:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000298:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800029c:	08000f14 	.word	0x08000f14
  ldr r2, =_sbss
 80002a0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a4:	20000068 	.word	0x20000068

080002a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002a8:	e7fe      	b.n	80002a8 <ADC1_2_IRQHandler>

080002aa <wait_ms>:
 *      Author: Ziad Mahmoud Saad
 */

#include "LCD.h"
#define READ_BIT(reg, bitNum)           ((reg >> bitNum)& 1U)
void wait_ms(uint32_t time) {
 80002aa:	b480      	push	{r7}
 80002ac:	b085      	sub	sp, #20
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 80002b2:	2300      	movs	r3, #0
 80002b4:	60fb      	str	r3, [r7, #12]
 80002b6:	e00b      	b.n	80002d0 <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]
 80002bc:	e002      	b.n	80002c4 <wait_ms+0x1a>
 80002be:	68bb      	ldr	r3, [r7, #8]
 80002c0:	3301      	adds	r3, #1
 80002c2:	60bb      	str	r3, [r7, #8]
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	2bfe      	cmp	r3, #254	; 0xfe
 80002c8:	d9f9      	bls.n	80002be <wait_ms+0x14>
	for (i = 0; i < time; i++)
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	3301      	adds	r3, #1
 80002ce:	60fb      	str	r3, [r7, #12]
 80002d0:	68fa      	ldr	r2, [r7, #12]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	429a      	cmp	r2, r3
 80002d6:	d3ef      	bcc.n	80002b8 <wait_ms+0xe>
}
 80002d8:	bf00      	nop
 80002da:	3714      	adds	r7, #20
 80002dc:	46bd      	mov	sp, r7
 80002de:	bc80      	pop	{r7}
 80002e0:	4770      	bx	lr

080002e2 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
 80002e2:	b580      	push	{r7, lr}
 80002e4:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 f8e2 	bl	80004b0 <LCD_WRITE_COMMAND>
}
 80002ec:	bf00      	nop
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <LCD_kick>:

void LCD_kick()
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET) ;
 80002f4:	2201      	movs	r2, #1
 80002f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fa:	4807      	ldr	r0, [pc, #28]	; (8000318 <LCD_kick+0x28>)
 80002fc:	f000 fdaa 	bl	8000e54 <GPIO_WritePin>
	wait_ms(5);
 8000300:	2005      	movs	r0, #5
 8000302:	f7ff ffd2 	bl	80002aa <wait_ms>
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
 8000306:	2200      	movs	r2, #0
 8000308:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <LCD_kick+0x28>)
 800030e:	f000 fda1 	bl	8000e54 <GPIO_WritePin>

}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010800 	.word	0x40010800

0800031c <LCD_GPIO_init>:


void LCD_GPIO_init()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	//EN_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000320:	4b52      	ldr	r3, [pc, #328]	; (800046c <LCD_GPIO_init+0x150>)
 8000322:	2204      	movs	r2, #4
 8000324:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = EN_SWITCH ;
 8000326:	4b51      	ldr	r3, [pc, #324]	; (800046c <LCD_GPIO_init+0x150>)
 8000328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800032c:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800032e:	4b4f      	ldr	r3, [pc, #316]	; (800046c <LCD_GPIO_init+0x150>)
 8000330:	2201      	movs	r2, #1
 8000332:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_CTRL, &PINConf) ;
 8000334:	494d      	ldr	r1, [pc, #308]	; (800046c <LCD_GPIO_init+0x150>)
 8000336:	484e      	ldr	r0, [pc, #312]	; (8000470 <LCD_GPIO_init+0x154>)
 8000338:	f000 fd10 	bl	8000d5c <GPIO_Init>
	//RW_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800033c:	4b4b      	ldr	r3, [pc, #300]	; (800046c <LCD_GPIO_init+0x150>)
 800033e:	2204      	movs	r2, #4
 8000340:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = RW_SWITCH ;
 8000342:	4b4a      	ldr	r3, [pc, #296]	; (800046c <LCD_GPIO_init+0x150>)
 8000344:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000348:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800034a:	4b48      	ldr	r3, [pc, #288]	; (800046c <LCD_GPIO_init+0x150>)
 800034c:	2201      	movs	r2, #1
 800034e:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_CTRL, &PINConf) ;
 8000350:	4946      	ldr	r1, [pc, #280]	; (800046c <LCD_GPIO_init+0x150>)
 8000352:	4847      	ldr	r0, [pc, #284]	; (8000470 <LCD_GPIO_init+0x154>)
 8000354:	f000 fd02 	bl	8000d5c <GPIO_Init>
	//RS_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000358:	4b44      	ldr	r3, [pc, #272]	; (800046c <LCD_GPIO_init+0x150>)
 800035a:	2204      	movs	r2, #4
 800035c:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = RS_SWITCH ;
 800035e:	4b43      	ldr	r3, [pc, #268]	; (800046c <LCD_GPIO_init+0x150>)
 8000360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000364:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000366:	4b41      	ldr	r3, [pc, #260]	; (800046c <LCD_GPIO_init+0x150>)
 8000368:	2201      	movs	r2, #1
 800036a:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_CTRL, &PINConf) ;
 800036c:	493f      	ldr	r1, [pc, #252]	; (800046c <LCD_GPIO_init+0x150>)
 800036e:	4840      	ldr	r0, [pc, #256]	; (8000470 <LCD_GPIO_init+0x154>)
 8000370:	f000 fcf4 	bl	8000d5c <GPIO_Init>


	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800037a:	483d      	ldr	r0, [pc, #244]	; (8000470 <LCD_GPIO_init+0x154>)
 800037c:	f000 fd6a 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000386:	483a      	ldr	r0, [pc, #232]	; (8000470 <LCD_GPIO_init+0x154>)
 8000388:	f000 fd64 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET) ;
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000392:	4837      	ldr	r0, [pc, #220]	; (8000470 <LCD_GPIO_init+0x154>)
 8000394:	f000 fd5e 	bl	8000e54 <GPIO_WritePin>


	//DATA_PINS are Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000398:	4b34      	ldr	r3, [pc, #208]	; (800046c <LCD_GPIO_init+0x150>)
 800039a:	2204      	movs	r2, #4
 800039c:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_0 ;
 800039e:	4b33      	ldr	r3, [pc, #204]	; (800046c <LCD_GPIO_init+0x150>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80003a4:	4b31      	ldr	r3, [pc, #196]	; (800046c <LCD_GPIO_init+0x150>)
 80003a6:	2201      	movs	r2, #1
 80003a8:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80003aa:	4930      	ldr	r1, [pc, #192]	; (800046c <LCD_GPIO_init+0x150>)
 80003ac:	4830      	ldr	r0, [pc, #192]	; (8000470 <LCD_GPIO_init+0x154>)
 80003ae:	f000 fcd5 	bl	8000d5c <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80003b2:	4b2e      	ldr	r3, [pc, #184]	; (800046c <LCD_GPIO_init+0x150>)
 80003b4:	2204      	movs	r2, #4
 80003b6:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_1 ;
 80003b8:	4b2c      	ldr	r3, [pc, #176]	; (800046c <LCD_GPIO_init+0x150>)
 80003ba:	2202      	movs	r2, #2
 80003bc:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80003be:	4b2b      	ldr	r3, [pc, #172]	; (800046c <LCD_GPIO_init+0x150>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80003c4:	4929      	ldr	r1, [pc, #164]	; (800046c <LCD_GPIO_init+0x150>)
 80003c6:	482a      	ldr	r0, [pc, #168]	; (8000470 <LCD_GPIO_init+0x154>)
 80003c8:	f000 fcc8 	bl	8000d5c <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80003cc:	4b27      	ldr	r3, [pc, #156]	; (800046c <LCD_GPIO_init+0x150>)
 80003ce:	2204      	movs	r2, #4
 80003d0:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_2 ;
 80003d2:	4b26      	ldr	r3, [pc, #152]	; (800046c <LCD_GPIO_init+0x150>)
 80003d4:	2204      	movs	r2, #4
 80003d6:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <LCD_GPIO_init+0x150>)
 80003da:	2201      	movs	r2, #1
 80003dc:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80003de:	4923      	ldr	r1, [pc, #140]	; (800046c <LCD_GPIO_init+0x150>)
 80003e0:	4823      	ldr	r0, [pc, #140]	; (8000470 <LCD_GPIO_init+0x154>)
 80003e2:	f000 fcbb 	bl	8000d5c <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <LCD_GPIO_init+0x150>)
 80003e8:	2204      	movs	r2, #4
 80003ea:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_3 ;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <LCD_GPIO_init+0x150>)
 80003ee:	2208      	movs	r2, #8
 80003f0:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <LCD_GPIO_init+0x150>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80003f8:	491c      	ldr	r1, [pc, #112]	; (800046c <LCD_GPIO_init+0x150>)
 80003fa:	481d      	ldr	r0, [pc, #116]	; (8000470 <LCD_GPIO_init+0x154>)
 80003fc:	f000 fcae 	bl	8000d5c <GPIO_Init>


	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <LCD_GPIO_init+0x150>)
 8000402:	2204      	movs	r2, #4
 8000404:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_4 ;
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <LCD_GPIO_init+0x150>)
 8000408:	2210      	movs	r2, #16
 800040a:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800040c:	4b17      	ldr	r3, [pc, #92]	; (800046c <LCD_GPIO_init+0x150>)
 800040e:	2201      	movs	r2, #1
 8000410:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 8000412:	4916      	ldr	r1, [pc, #88]	; (800046c <LCD_GPIO_init+0x150>)
 8000414:	4816      	ldr	r0, [pc, #88]	; (8000470 <LCD_GPIO_init+0x154>)
 8000416:	f000 fca1 	bl	8000d5c <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800041a:	4b14      	ldr	r3, [pc, #80]	; (800046c <LCD_GPIO_init+0x150>)
 800041c:	2204      	movs	r2, #4
 800041e:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_5 ;
 8000420:	4b12      	ldr	r3, [pc, #72]	; (800046c <LCD_GPIO_init+0x150>)
 8000422:	2220      	movs	r2, #32
 8000424:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000426:	4b11      	ldr	r3, [pc, #68]	; (800046c <LCD_GPIO_init+0x150>)
 8000428:	2201      	movs	r2, #1
 800042a:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 800042c:	490f      	ldr	r1, [pc, #60]	; (800046c <LCD_GPIO_init+0x150>)
 800042e:	4810      	ldr	r0, [pc, #64]	; (8000470 <LCD_GPIO_init+0x154>)
 8000430:	f000 fc94 	bl	8000d5c <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000434:	4b0d      	ldr	r3, [pc, #52]	; (800046c <LCD_GPIO_init+0x150>)
 8000436:	2204      	movs	r2, #4
 8000438:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_6 ;
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <LCD_GPIO_init+0x150>)
 800043c:	2240      	movs	r2, #64	; 0x40
 800043e:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000440:	4b0a      	ldr	r3, [pc, #40]	; (800046c <LCD_GPIO_init+0x150>)
 8000442:	2201      	movs	r2, #1
 8000444:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 8000446:	4909      	ldr	r1, [pc, #36]	; (800046c <LCD_GPIO_init+0x150>)
 8000448:	4809      	ldr	r0, [pc, #36]	; (8000470 <LCD_GPIO_init+0x154>)
 800044a:	f000 fc87 	bl	8000d5c <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800044e:	4b07      	ldr	r3, [pc, #28]	; (800046c <LCD_GPIO_init+0x150>)
 8000450:	2204      	movs	r2, #4
 8000452:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_7 ;
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <LCD_GPIO_init+0x150>)
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800045a:	4b04      	ldr	r3, [pc, #16]	; (800046c <LCD_GPIO_init+0x150>)
 800045c:	2201      	movs	r2, #1
 800045e:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 8000460:	4902      	ldr	r1, [pc, #8]	; (800046c <LCD_GPIO_init+0x150>)
 8000462:	4803      	ldr	r0, [pc, #12]	; (8000470 <LCD_GPIO_init+0x154>)
 8000464:	f000 fc7a 	bl	8000d5c <GPIO_Init>
}
 8000468:	bf00      	nop
 800046a:	bd80      	pop	{r7, pc}
 800046c:	20000020 	.word	0x20000020
 8000470:	40010800 	.word	0x40010800

08000474 <LCD_init>:

void LCD_init()
{
 8000474:	b580      	push	{r7, lr}
 8000476:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000478:	2014      	movs	r0, #20
 800047a:	f7ff ff16 	bl	80002aa <wait_ms>

	LCD_GPIO_init();
 800047e:	f7ff ff4d 	bl	800031c <LCD_GPIO_init>
	wait_ms(20);
 8000482:	2014      	movs	r0, #20
 8000484:	f7ff ff11 	bl	80002aa <wait_ms>
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000488:	2001      	movs	r0, #1
 800048a:	f000 f811 	bl	80004b0 <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800048e:	2038      	movs	r0, #56	; 0x38
 8000490:	f000 f80e 	bl	80004b0 <LCD_WRITE_COMMAND>
	wait_ms(5);
 8000494:	2005      	movs	r0, #5
 8000496:	f7ff ff08 	bl	80002aa <wait_ms>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 800049a:	2006      	movs	r0, #6
 800049c:	f000 f808 	bl	80004b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80004a0:	2080      	movs	r0, #128	; 0x80
 80004a2:	f000 f805 	bl	80004b0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80004a6:	200f      	movs	r0, #15
 80004a8:	f000 f802 	bl	80004b0 <LCD_WRITE_COMMAND>
}
 80004ac:	bf00      	nop
 80004ae:	bd80      	pop	{r7, pc}

080004b0 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	4603      	mov	r3, r0
 80004b8:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004ba:	2200      	movs	r2, #0
 80004bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c0:	4832      	ldr	r0, [pc, #200]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 80004c2:	f000 fcc7 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004cc:	482f      	ldr	r0, [pc, #188]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 80004ce:	f000 fcc1 	bl	8000e54 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, GPIO_PIN_0, READ_BIT(command, 0));
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	f003 0301 	and.w	r3, r3, #1
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	461a      	mov	r2, r3
 80004dc:	2101      	movs	r1, #1
 80004de:	482b      	ldr	r0, [pc, #172]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 80004e0:	f000 fcb8 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_1, READ_BIT(command, 1));
 80004e4:	79fb      	ldrb	r3, [r7, #7]
 80004e6:	085b      	lsrs	r3, r3, #1
 80004e8:	b2db      	uxtb	r3, r3
 80004ea:	f003 0301 	and.w	r3, r3, #1
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	461a      	mov	r2, r3
 80004f2:	2102      	movs	r1, #2
 80004f4:	4825      	ldr	r0, [pc, #148]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 80004f6:	f000 fcad 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_2, READ_BIT(command, 2));
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	089b      	lsrs	r3, r3, #2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	f003 0301 	and.w	r3, r3, #1
 8000504:	b2db      	uxtb	r3, r3
 8000506:	461a      	mov	r2, r3
 8000508:	2104      	movs	r1, #4
 800050a:	4820      	ldr	r0, [pc, #128]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 800050c:	f000 fca2 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_3, READ_BIT(command, 3));
 8000510:	79fb      	ldrb	r3, [r7, #7]
 8000512:	08db      	lsrs	r3, r3, #3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	b2db      	uxtb	r3, r3
 800051c:	461a      	mov	r2, r3
 800051e:	2108      	movs	r1, #8
 8000520:	481a      	ldr	r0, [pc, #104]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 8000522:	f000 fc97 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, READ_BIT(command, 4));
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	091b      	lsrs	r3, r3, #4
 800052a:	b2db      	uxtb	r3, r3
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	b2db      	uxtb	r3, r3
 8000532:	461a      	mov	r2, r3
 8000534:	2110      	movs	r1, #16
 8000536:	4815      	ldr	r0, [pc, #84]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 8000538:	f000 fc8c 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, READ_BIT(command, 5));
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	095b      	lsrs	r3, r3, #5
 8000540:	b2db      	uxtb	r3, r3
 8000542:	f003 0301 	and.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	2120      	movs	r1, #32
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 800054e:	f000 fc81 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, READ_BIT(command, 6));
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	099b      	lsrs	r3, r3, #6
 8000556:	b2db      	uxtb	r3, r3
 8000558:	f003 0301 	and.w	r3, r3, #1
 800055c:	b2db      	uxtb	r3, r3
 800055e:	461a      	mov	r2, r3
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	480a      	ldr	r0, [pc, #40]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 8000564:	f000 fc76 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, READ_BIT(command, 7));
 8000568:	79fb      	ldrb	r3, [r7, #7]
 800056a:	09db      	lsrs	r3, r3, #7
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	2180      	movs	r1, #128	; 0x80
 8000572:	4806      	ldr	r0, [pc, #24]	; (800058c <LCD_WRITE_COMMAND+0xdc>)
 8000574:	f000 fc6e 	bl	8000e54 <GPIO_WritePin>

	wait_ms(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe96 	bl	80002aa <wait_ms>
	LCD_kick();
 800057e:	f7ff feb7 	bl	80002f0 <LCD_kick>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40010800 	.word	0x40010800

08000590 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	4832      	ldr	r0, [pc, #200]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 80005a2:	f000 fc57 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ac:	482f      	ldr	r0, [pc, #188]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 80005ae:	f000 fc51 	bl	8000e54 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, GPIO_PIN_0, READ_BIT(character, 0));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 0301 	and.w	r3, r3, #1
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	461a      	mov	r2, r3
 80005bc:	2101      	movs	r1, #1
 80005be:	482b      	ldr	r0, [pc, #172]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 80005c0:	f000 fc48 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_1, READ_BIT(character, 1));
 80005c4:	79fb      	ldrb	r3, [r7, #7]
 80005c6:	085b      	lsrs	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	461a      	mov	r2, r3
 80005d2:	2102      	movs	r1, #2
 80005d4:	4825      	ldr	r0, [pc, #148]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 80005d6:	f000 fc3d 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_2, READ_BIT(character, 2));
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	f003 0301 	and.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	461a      	mov	r2, r3
 80005e8:	2104      	movs	r1, #4
 80005ea:	4820      	ldr	r0, [pc, #128]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 80005ec:	f000 fc32 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_3, READ_BIT(character, 3));
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	461a      	mov	r2, r3
 80005fe:	2108      	movs	r1, #8
 8000600:	481a      	ldr	r0, [pc, #104]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 8000602:	f000 fc27 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, READ_BIT(character, 4));
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	091b      	lsrs	r3, r3, #4
 800060a:	b2db      	uxtb	r3, r3
 800060c:	f003 0301 	and.w	r3, r3, #1
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	2110      	movs	r1, #16
 8000616:	4815      	ldr	r0, [pc, #84]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 8000618:	f000 fc1c 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, READ_BIT(character, 5));
 800061c:	79fb      	ldrb	r3, [r7, #7]
 800061e:	095b      	lsrs	r3, r3, #5
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	b2db      	uxtb	r3, r3
 8000628:	461a      	mov	r2, r3
 800062a:	2120      	movs	r1, #32
 800062c:	480f      	ldr	r0, [pc, #60]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 800062e:	f000 fc11 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, READ_BIT(character, 6));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	099b      	lsrs	r3, r3, #6
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	461a      	mov	r2, r3
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	480a      	ldr	r0, [pc, #40]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 8000644:	f000 fc06 	bl	8000e54 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, READ_BIT(character, 7));
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	09db      	lsrs	r3, r3, #7
 800064c:	b2db      	uxtb	r3, r3
 800064e:	461a      	mov	r2, r3
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	4806      	ldr	r0, [pc, #24]	; (800066c <LCD_WRITE_CHAR+0xdc>)
 8000654:	f000 fbfe 	bl	8000e54 <GPIO_WritePin>
	wait_ms(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff fe26 	bl	80002aa <wait_ms>
	LCD_kick();
 800065e:	f7ff fe47 	bl	80002f0 <LCD_kick>


}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40010800 	.word	0x40010800

08000670 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	460a      	mov	r2, r1
 800067a:	71fb      	strb	r3, [r7, #7]
 800067c:	4613      	mov	r3, r2
 800067e:	71bb      	strb	r3, [r7, #6]
	if(line==1 && position>=0 && position<16)
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d109      	bne.n	800069a <LCD_GOTO_XY+0x2a>
 8000686:	79bb      	ldrb	r3, [r7, #6]
 8000688:	2b0f      	cmp	r3, #15
 800068a:	d806      	bhi.n	800069a <LCD_GOTO_XY+0x2a>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 800068c:	79bb      	ldrb	r3, [r7, #6]
 800068e:	3b80      	subs	r3, #128	; 0x80
 8000690:	b2db      	uxtb	r3, r3
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ff0c 	bl	80004b0 <LCD_WRITE_COMMAND>
	}else if(line==2)
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
	}
}
 8000698:	e008      	b.n	80006ac <LCD_GOTO_XY+0x3c>
	}else if(line==2)
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	2b02      	cmp	r3, #2
 800069e:	d105      	bne.n	80006ac <LCD_GOTO_XY+0x3c>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 80006a0:	79bb      	ldrb	r3, [r7, #6]
 80006a2:	3b40      	subs	r3, #64	; 0x40
 80006a4:	b2db      	uxtb	r3, r3
 80006a6:	4618      	mov	r0, r3
 80006a8:	f7ff ff02 	bl	80004b0 <LCD_WRITE_COMMAND>
}
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	int count=0;
 80006bc:	2300      	movs	r3, #0
 80006be:	60fb      	str	r3, [r7, #12]
	while(*string!=0)
 80006c0:	e01c      	b.n	80006fc <LCD_WRITE_STRING+0x48>
	{
		count++;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	1c5a      	adds	r2, r3, #1
 80006cc:	607a      	str	r2, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff5d 	bl	8000590 <LCD_WRITE_CHAR>
		if (count == 16)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b10      	cmp	r3, #16
 80006da:	d104      	bne.n	80006e6 <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80006dc:	2100      	movs	r1, #0
 80006de:	2002      	movs	r0, #2
 80006e0:	f7ff ffc6 	bl	8000670 <LCD_GOTO_XY>
 80006e4:	e00a      	b.n	80006fc <LCD_WRITE_STRING+0x48>
		}else if (count == 32)
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	2b20      	cmp	r3, #32
 80006ea:	d107      	bne.n	80006fc <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80006ec:	f7ff fdf9 	bl	80002e2 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80006f0:	2100      	movs	r1, #0
 80006f2:	2001      	movs	r0, #1
 80006f4:	f7ff ffbc 	bl	8000670 <LCD_GOTO_XY>
			count=0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
	while(*string!=0)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1de      	bne.n	80006c2 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000704:	bf00      	nop
 8000706:	3710      	adds	r7, #16
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <ENABLE_NVIC>:
//	Generic Functions
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


void ENABLE_NVIC (uint16_t IRQ)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 8000716:	88fb      	ldrh	r3, [r7, #6]
 8000718:	2b0f      	cmp	r3, #15
 800071a:	d854      	bhi.n	80007c6 <ENABLE_NVIC+0xba>
 800071c:	a201      	add	r2, pc, #4	; (adr r2, 8000724 <ENABLE_NVIC+0x18>)
 800071e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000722:	bf00      	nop
 8000724:	08000765 	.word	0x08000765
 8000728:	08000773 	.word	0x08000773
 800072c:	08000781 	.word	0x08000781
 8000730:	0800078f 	.word	0x0800078f
 8000734:	0800079d 	.word	0x0800079d
 8000738:	080007ab 	.word	0x080007ab
 800073c:	080007ab 	.word	0x080007ab
 8000740:	080007ab 	.word	0x080007ab
 8000744:	080007ab 	.word	0x080007ab
 8000748:	080007ab 	.word	0x080007ab
 800074c:	080007b9 	.word	0x080007b9
 8000750:	080007b9 	.word	0x080007b9
 8000754:	080007b9 	.word	0x080007b9
 8000758:	080007b9 	.word	0x080007b9
 800075c:	080007b9 	.word	0x080007b9
 8000760:	080007b9 	.word	0x080007b9
	{
	case 0:
		NVIC_IRQ6_EXTI0_ENABLE ;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <ENABLE_NVIC+0xc4>)
 800076a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800076e:	6013      	str	r3, [r2, #0]
		break;
 8000770:	e029      	b.n	80007c6 <ENABLE_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_ENABLE ;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	4a16      	ldr	r2, [pc, #88]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6013      	str	r3, [r2, #0]
		break;
 800077e:	e022      	b.n	80007c6 <ENABLE_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_ENABLE ;
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800078a:	6013      	str	r3, [r2, #0]
		break;
 800078c:	e01b      	b.n	80007c6 <ENABLE_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_ENABLE ;
 800078e:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <ENABLE_NVIC+0xc4>)
 8000794:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000798:	6013      	str	r3, [r2, #0]
		break;
 800079a:	e014      	b.n	80007c6 <ENABLE_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_ENABLE ;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <ENABLE_NVIC+0xc4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0b      	ldr	r2, [pc, #44]	; (80007d0 <ENABLE_NVIC+0xc4>)
 80007a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007a6:	6013      	str	r3, [r2, #0]
		break;
 80007a8:	e00d      	b.n	80007c6 <ENABLE_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_ENABLE ;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <ENABLE_NVIC+0xc4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a08      	ldr	r2, [pc, #32]	; (80007d0 <ENABLE_NVIC+0xc4>)
 80007b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80007b4:	6013      	str	r3, [r2, #0]
		break;
 80007b6:	e006      	b.n	80007c6 <ENABLE_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_ENABLE ;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <ENABLE_NVIC+0xc8>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a05      	ldr	r2, [pc, #20]	; (80007d4 <ENABLE_NVIC+0xc8>)
 80007be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c2:	6013      	str	r3, [r2, #0]
		break;
 80007c4:	bf00      	nop
	}

}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000e104 	.word	0xe000e104

080007d8 <DISABLE_NVIC>:

void DISABLE_NVIC (uint16_t IRQ)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	switch (IRQ)
 80007e2:	88fb      	ldrh	r3, [r7, #6]
 80007e4:	2b0f      	cmp	r3, #15
 80007e6:	d854      	bhi.n	8000892 <DISABLE_NVIC+0xba>
 80007e8:	a201      	add	r2, pc, #4	; (adr r2, 80007f0 <DISABLE_NVIC+0x18>)
 80007ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ee:	bf00      	nop
 80007f0:	08000831 	.word	0x08000831
 80007f4:	0800083f 	.word	0x0800083f
 80007f8:	0800084d 	.word	0x0800084d
 80007fc:	0800085b 	.word	0x0800085b
 8000800:	08000869 	.word	0x08000869
 8000804:	08000877 	.word	0x08000877
 8000808:	08000877 	.word	0x08000877
 800080c:	08000877 	.word	0x08000877
 8000810:	08000877 	.word	0x08000877
 8000814:	08000877 	.word	0x08000877
 8000818:	08000885 	.word	0x08000885
 800081c:	08000885 	.word	0x08000885
 8000820:	08000885 	.word	0x08000885
 8000824:	08000885 	.word	0x08000885
 8000828:	08000885 	.word	0x08000885
 800082c:	08000885 	.word	0x08000885
	{
	case 0:
		NVIC_IRQ6_EXTI0_DISABLE ;
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <DISABLE_NVIC+0xc4>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	; (800089c <DISABLE_NVIC+0xc4>)
 8000836:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083a:	6013      	str	r3, [r2, #0]
		break;
 800083c:	e029      	b.n	8000892 <DISABLE_NVIC+0xba>
	case 1:
		NVIC_IRQ7_EXTI1_DISABLE ;
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <DISABLE_NVIC+0xc4>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a16      	ldr	r2, [pc, #88]	; (800089c <DISABLE_NVIC+0xc4>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6013      	str	r3, [r2, #0]
		break;
 800084a:	e022      	b.n	8000892 <DISABLE_NVIC+0xba>
	case 2:
		NVIC_IRQ8_EXTI2_DISABLE ;
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <DISABLE_NVIC+0xc4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a12      	ldr	r2, [pc, #72]	; (800089c <DISABLE_NVIC+0xc4>)
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	6013      	str	r3, [r2, #0]
		break;
 8000858:	e01b      	b.n	8000892 <DISABLE_NVIC+0xba>
	case 3:
		NVIC_IRQ9_EXTI3_DISABLE ;
 800085a:	4b10      	ldr	r3, [pc, #64]	; (800089c <DISABLE_NVIC+0xc4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a0f      	ldr	r2, [pc, #60]	; (800089c <DISABLE_NVIC+0xc4>)
 8000860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000864:	6013      	str	r3, [r2, #0]
		break;
 8000866:	e014      	b.n	8000892 <DISABLE_NVIC+0xba>
	case 4:
		NVIC_IRQ10_EXTI4_DISABLE ;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <DISABLE_NVIC+0xc4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a0b      	ldr	r2, [pc, #44]	; (800089c <DISABLE_NVIC+0xc4>)
 800086e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000872:	6013      	str	r3, [r2, #0]
		break;
 8000874:	e00d      	b.n	8000892 <DISABLE_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_DISABLE ;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <DISABLE_NVIC+0xc4>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <DISABLE_NVIC+0xc4>)
 800087c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000880:	6013      	str	r3, [r2, #0]
		break;
 8000882:	e006      	b.n	8000892 <DISABLE_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_DISABLE ;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <DISABLE_NVIC+0xc8>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <DISABLE_NVIC+0xc8>)
 800088a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800088e:	6013      	str	r3, [r2, #0]
		break;
 8000890:	bf00      	nop
	}
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	e000e180 	.word	0xe000e180
 80008a0:	e000e184 	.word	0xe000e184

080008a4 <UPDATE_EXTI>:


void UPDATE_EXTI(EXTI__PIN_Config_t* EXTI_Config)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	//	Configure GPIO to be floating input
	GPIO_PIN_Config PINcfg ;
	PINcfg.pin_number	= EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	891b      	ldrh	r3, [r3, #8]
 80008b0:	813b      	strh	r3, [r7, #8]
	PINcfg.pin_mode		= GPIO_MODE_Floating_Input ;
 80008b2:	2301      	movs	r3, #1
 80008b4:	817b      	strh	r3, [r7, #10]

	GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_PORT, &PINcfg);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	f107 0208 	add.w	r2, r7, #8
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 fa4b 	bl	8000d5c <GPIO_Init>

	//-----------------------------
	//	UPDATE AFIO to route between EXTI Line

	uint8_t AFIO_EXTICR_Index		=  EXTI_Config->EXTI_PIN.EXTI_InputLineNumber / 4 ;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	089b      	lsrs	r3, r3, #2
 80008cc:	b29b      	uxth	r3, r3
 80008ce:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_Postion		=  (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber % 4) * 4 ;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	881b      	ldrh	r3, [r3, #0]
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	b2db      	uxtb	r3, r3
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	73bb      	strb	r3, [r7, #14]

	AFIO->EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Postion) ;
 80008e0:	4a57      	ldr	r2, [pc, #348]	; (8000a40 <UPDATE_EXTI+0x19c>)
 80008e2:	7bfb      	ldrb	r3, [r7, #15]
 80008e4:	3302      	adds	r3, #2
 80008e6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008ea:	7bbb      	ldrb	r3, [r7, #14]
 80008ec:	210f      	movs	r1, #15
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	4952      	ldr	r1, [pc, #328]	; (8000a40 <UPDATE_EXTI+0x19c>)
 80008f8:	7bfb      	ldrb	r3, [r7, #15]
 80008fa:	4002      	ands	r2, r0
 80008fc:	3302      	adds	r3, #2
 80008fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	AFIO->EXTICR[AFIO_EXTICR_Index] |= ((AFIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_PORT) & 0xF) << AFIO_EXTICR_Postion );
 8000902:	4a4f      	ldr	r2, [pc, #316]	; (8000a40 <UPDATE_EXTI+0x19c>)
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	3302      	adds	r3, #2
 8000908:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	494c      	ldr	r1, [pc, #304]	; (8000a44 <UPDATE_EXTI+0x1a0>)
 8000912:	428b      	cmp	r3, r1
 8000914:	d01d      	beq.n	8000952 <UPDATE_EXTI+0xae>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	494b      	ldr	r1, [pc, #300]	; (8000a48 <UPDATE_EXTI+0x1a4>)
 800091c:	428b      	cmp	r3, r1
 800091e:	d016      	beq.n	800094e <UPDATE_EXTI+0xaa>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	4949      	ldr	r1, [pc, #292]	; (8000a4c <UPDATE_EXTI+0x1a8>)
 8000926:	428b      	cmp	r3, r1
 8000928:	d00f      	beq.n	800094a <UPDATE_EXTI+0xa6>
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	4948      	ldr	r1, [pc, #288]	; (8000a50 <UPDATE_EXTI+0x1ac>)
 8000930:	428b      	cmp	r3, r1
 8000932:	d008      	beq.n	8000946 <UPDATE_EXTI+0xa2>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	4946      	ldr	r1, [pc, #280]	; (8000a54 <UPDATE_EXTI+0x1b0>)
 800093a:	428b      	cmp	r3, r1
 800093c:	d101      	bne.n	8000942 <UPDATE_EXTI+0x9e>
 800093e:	2304      	movs	r3, #4
 8000940:	e008      	b.n	8000954 <UPDATE_EXTI+0xb0>
 8000942:	2300      	movs	r3, #0
 8000944:	e006      	b.n	8000954 <UPDATE_EXTI+0xb0>
 8000946:	2303      	movs	r3, #3
 8000948:	e004      	b.n	8000954 <UPDATE_EXTI+0xb0>
 800094a:	2302      	movs	r3, #2
 800094c:	e002      	b.n	8000954 <UPDATE_EXTI+0xb0>
 800094e:	2301      	movs	r3, #1
 8000950:	e000      	b.n	8000954 <UPDATE_EXTI+0xb0>
 8000952:	2300      	movs	r3, #0
 8000954:	7bb9      	ldrb	r1, [r7, #14]
 8000956:	408b      	lsls	r3, r1
 8000958:	4618      	mov	r0, r3
 800095a:	4939      	ldr	r1, [pc, #228]	; (8000a40 <UPDATE_EXTI+0x19c>)
 800095c:	7bfb      	ldrb	r3, [r7, #15]
 800095e:	4302      	orrs	r2, r0
 8000960:	3302      	adds	r3, #2
 8000962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//-----------------------------
	//	UPDATE RISING and FALLING Reg

	EXTI->RTSR &= ~( EXTI_Config->EXTI_PIN.GPIO_PIN ) ;
 8000966:	4b3c      	ldr	r3, [pc, #240]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	8912      	ldrh	r2, [r2, #8]
 800096e:	43d2      	mvns	r2, r2
 8000970:	4611      	mov	r1, r2
 8000972:	4a39      	ldr	r2, [pc, #228]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000974:	400b      	ands	r3, r1
 8000976:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~( EXTI_Config->EXTI_PIN.GPIO_PIN ) ;
 8000978:	4b37      	ldr	r3, [pc, #220]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	8912      	ldrh	r2, [r2, #8]
 8000980:	43d2      	mvns	r2, r2
 8000982:	4611      	mov	r1, r2
 8000984:	4a34      	ldr	r2, [pc, #208]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000986:	400b      	ands	r3, r1
 8000988:	60d3      	str	r3, [r2, #12]

	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	7b1b      	ldrb	r3, [r3, #12]
 800098e:	2b00      	cmp	r3, #0
 8000990:	d108      	bne.n	80009a4 <UPDATE_EXTI+0x100>
	{
		EXTI->RTSR |= EXTI_Config->EXTI_PIN.GPIO_PIN ;
 8000992:	4b31      	ldr	r3, [pc, #196]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	8912      	ldrh	r2, [r2, #8]
 800099a:	4611      	mov	r1, r2
 800099c:	4a2e      	ldr	r2, [pc, #184]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 800099e:	430b      	orrs	r3, r1
 80009a0:	6093      	str	r3, [r2, #8]
 80009a2:	e020      	b.n	80009e6 <UPDATE_EXTI+0x142>

	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7b1b      	ldrb	r3, [r3, #12]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d108      	bne.n	80009be <UPDATE_EXTI+0x11a>
	{
		EXTI->FTSR |= EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	8912      	ldrh	r2, [r2, #8]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4a28      	ldr	r2, [pc, #160]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 80009b8:	430b      	orrs	r3, r1
 80009ba:	60d3      	str	r3, [r2, #12]
 80009bc:	e013      	b.n	80009e6 <UPDATE_EXTI+0x142>

	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_RisingAndFalling)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	7b1b      	ldrb	r3, [r3, #12]
 80009c2:	2b02      	cmp	r3, #2
 80009c4:	d10f      	bne.n	80009e6 <UPDATE_EXTI+0x142>
	{
		EXTI->RTSR |= EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80009c6:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 80009c8:	689b      	ldr	r3, [r3, #8]
 80009ca:	687a      	ldr	r2, [r7, #4]
 80009cc:	8912      	ldrh	r2, [r2, #8]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4a21      	ldr	r2, [pc, #132]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 80009d2:	430b      	orrs	r3, r1
 80009d4:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 80009d8:	68db      	ldr	r3, [r3, #12]
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	8912      	ldrh	r2, [r2, #8]
 80009de:	4611      	mov	r1, r2
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 80009e2:	430b      	orrs	r3, r1
 80009e4:	60d3      	str	r3, [r2, #12]
	}

	//-----------------------------
	//	UPDATE IRQ Handling CallBack

	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack ;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	881b      	ldrh	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	4a1a      	ldr	r2, [pc, #104]	; (8000a5c <UPDATE_EXTI+0x1b8>)
 80009f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	//-----------------------------
	//ENABLE and DISABLE IRQ

	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE )
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	7b5b      	ldrb	r3, [r3, #13]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d10d      	bne.n	8000a1a <UPDATE_EXTI+0x176>
	{
		EXTI->IMR |= EXTI_Config->EXTI_PIN.GPIO_PIN ;
 80009fe:	4b16      	ldr	r3, [pc, #88]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	8912      	ldrh	r2, [r2, #8]
 8000a06:	4611      	mov	r1, r2
 8000a08:	4a13      	ldr	r2, [pc, #76]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000a0a:	430b      	orrs	r3, r1
 8000a0c:	6013      	str	r3, [r2, #0]
		ENABLE_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber ) ;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f7ff fe7a 	bl	800070c <ENABLE_NVIC>
		DISABLE_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber ) ;
	}



}
 8000a18:	e00d      	b.n	8000a36 <UPDATE_EXTI+0x192>
		EXTI->IMR &= ~( EXTI_Config->EXTI_PIN.GPIO_PIN ) ;
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	8912      	ldrh	r2, [r2, #8]
 8000a22:	43d2      	mvns	r2, r2
 8000a24:	4611      	mov	r1, r2
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <UPDATE_EXTI+0x1b4>)
 8000a28:	400b      	ands	r3, r1
 8000a2a:	6013      	str	r3, [r2, #0]
		DISABLE_NVIC (EXTI_Config->EXTI_PIN.EXTI_InputLineNumber ) ;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	881b      	ldrh	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fed1 	bl	80007d8 <DISABLE_NVIC>
}
 8000a36:	bf00      	nop
 8000a38:	3710      	adds	r7, #16
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40010000 	.word	0x40010000
 8000a44:	40010800 	.word	0x40010800
 8000a48:	40010c00 	.word	0x40010c00
 8000a4c:	40011000 	.word	0x40011000
 8000a50:	40011400 	.word	0x40011400
 8000a54:	40011800 	.word	0x40011800
 8000a58:	40010400 	.word	0x40010400
 8000a5c:	20000028 	.word	0x20000028

08000a60 <EXTI0_IRQHandler>:
//-------------------------
//	ISR Functions
//-------------------------

void EXTI0_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= 1<<0 ;
 8000a64:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <EXTI0_IRQHandler+0x1c>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <EXTI0_IRQHandler+0x1c>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[0]();
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <EXTI0_IRQHandler+0x20>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	4798      	blx	r3

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010400 	.word	0x40010400
 8000a80:	20000028 	.word	0x20000028

08000a84 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 0 ) ;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <EXTI1_IRQHandler+0x1c>)
 8000a8a:	695b      	ldr	r3, [r3, #20]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <EXTI1_IRQHandler+0x1c>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[0]() ;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <EXTI1_IRQHandler+0x20>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4798      	blx	r3

}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40010400 	.word	0x40010400
 8000aa4:	20000028 	.word	0x20000028

08000aa8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 1 ) ;
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <EXTI2_IRQHandler+0x1c>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <EXTI2_IRQHandler+0x1c>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[1]() ;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <EXTI2_IRQHandler+0x20>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4798      	blx	r3
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40010400 	.word	0x40010400
 8000ac8:	20000028 	.word	0x20000028

08000acc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 2 ) ;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <EXTI3_IRQHandler+0x1c>)
 8000ad2:	695b      	ldr	r3, [r3, #20]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <EXTI3_IRQHandler+0x1c>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[2]() ;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <EXTI3_IRQHandler+0x20>)
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	4798      	blx	r3
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40010400 	.word	0x40010400
 8000aec:	20000028 	.word	0x20000028

08000af0 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	EXTI->PR |= ( 1 << 3 ) ;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <EXTI4_IRQHandler+0x1c>)
 8000af6:	695b      	ldr	r3, [r3, #20]
 8000af8:	4a04      	ldr	r2, [pc, #16]	; (8000b0c <EXTI4_IRQHandler+0x1c>)
 8000afa:	f043 0308 	orr.w	r3, r3, #8
 8000afe:	6153      	str	r3, [r2, #20]
	//	CALL IRQ CallBack
	GP_IRQ_CallBack[3]() ;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <EXTI4_IRQHandler+0x20>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	4798      	blx	r3
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40010400 	.word	0x40010400
 8000b10:	20000028 	.word	0x20000028

08000b14 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	//	This bit is cleared by writing a ‘1’ into the bit.
	//	CALL IRQ CallBack
	if(EXTI->PR & 1<<5){	EXTI->PR |= ( 1 << 5 ) ;	GP_IRQ_CallBack[5]() ; }
 8000b18:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	f003 0320 	and.w	r3, r3, #32
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d008      	beq.n	8000b36 <EXTI9_5_IRQHandler+0x22>
 8000b24:	4b23      	ldr	r3, [pc, #140]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b26:	695b      	ldr	r3, [r3, #20]
 8000b28:	4a22      	ldr	r2, [pc, #136]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b2a:	f043 0320 	orr.w	r3, r3, #32
 8000b2e:	6153      	str	r3, [r2, #20]
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <EXTI9_5_IRQHandler+0xa4>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	4798      	blx	r3
	if(EXTI->PR & 1<<6){	EXTI->PR |= ( 1 << 6 ) ;	GP_IRQ_CallBack[6]() ; }
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d008      	beq.n	8000b54 <EXTI9_5_IRQHandler+0x40>
 8000b42:	4b1c      	ldr	r3, [pc, #112]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a1b      	ldr	r2, [pc, #108]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	6153      	str	r3, [r2, #20]
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <EXTI9_5_IRQHandler+0xa4>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4798      	blx	r3
	if(EXTI->PR & 1<<7){	EXTI->PR |= ( 1 << 7 ) ;	GP_IRQ_CallBack[7]() ; }
 8000b54:	4b17      	ldr	r3, [pc, #92]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b56:	695b      	ldr	r3, [r3, #20]
 8000b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d008      	beq.n	8000b72 <EXTI9_5_IRQHandler+0x5e>
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	6153      	str	r3, [r2, #20]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <EXTI9_5_IRQHandler+0xa4>)
 8000b6e:	69db      	ldr	r3, [r3, #28]
 8000b70:	4798      	blx	r3
	if(EXTI->PR & 1<<8){	EXTI->PR |= ( 1 << 8 ) ;	GP_IRQ_CallBack[8]() ; }
 8000b72:	4b10      	ldr	r3, [pc, #64]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b74:	695b      	ldr	r3, [r3, #20]
 8000b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <EXTI9_5_IRQHandler+0x7c>
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b80:	695b      	ldr	r3, [r3, #20]
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b88:	6153      	str	r3, [r2, #20]
 8000b8a:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <EXTI9_5_IRQHandler+0xa4>)
 8000b8c:	6a1b      	ldr	r3, [r3, #32]
 8000b8e:	4798      	blx	r3
	if(EXTI->PR & 1<<9){	EXTI->PR |= ( 1 << 9 ) ;	GP_IRQ_CallBack[9]() ; }
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d008      	beq.n	8000bae <EXTI9_5_IRQHandler+0x9a>
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000b9e:	695b      	ldr	r3, [r3, #20]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <EXTI9_5_IRQHandler+0xa0>)
 8000ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba6:	6153      	str	r3, [r2, #20]
 8000ba8:	4b03      	ldr	r3, [pc, #12]	; (8000bb8 <EXTI9_5_IRQHandler+0xa4>)
 8000baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bac:	4798      	blx	r3
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40010400 	.word	0x40010400
 8000bb8:	20000028 	.word	0x20000028

08000bbc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
	//Pending register (EXTI_PR)
	//	This bit is cleared by writing a ‘1’ into the bit.
	//	CALL IRQ CallBack
	if(EXTI->PR & 1<<10){	EXTI->PR |= ( 1 << 10 ) ;	GP_IRQ_CallBack[10]() ; }
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d008      	beq.n	8000bde <EXTI15_10_IRQHandler+0x22>
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bd6:	6153      	str	r3, [r2, #20]
 8000bd8:	4b28      	ldr	r3, [pc, #160]	; (8000c7c <EXTI15_10_IRQHandler+0xc0>)
 8000bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bdc:	4798      	blx	r3
	if(EXTI->PR & 1<<11){	EXTI->PR |= ( 1 << 11 ) ;	GP_IRQ_CallBack[11]() ; }
 8000bde:	4b26      	ldr	r3, [pc, #152]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d008      	beq.n	8000bfc <EXTI15_10_IRQHandler+0x40>
 8000bea:	4b23      	ldr	r3, [pc, #140]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000bec:	695b      	ldr	r3, [r3, #20]
 8000bee:	4a22      	ldr	r2, [pc, #136]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000bf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bf4:	6153      	str	r3, [r2, #20]
 8000bf6:	4b21      	ldr	r3, [pc, #132]	; (8000c7c <EXTI15_10_IRQHandler+0xc0>)
 8000bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfa:	4798      	blx	r3
	if(EXTI->PR & 1<<12){	EXTI->PR |= ( 1 << 12 ) ;	GP_IRQ_CallBack[12]() ; }
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000bfe:	695b      	ldr	r3, [r3, #20]
 8000c00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d008      	beq.n	8000c1a <EXTI15_10_IRQHandler+0x5e>
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c0a:	695b      	ldr	r3, [r3, #20]
 8000c0c:	4a1a      	ldr	r2, [pc, #104]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c12:	6153      	str	r3, [r2, #20]
 8000c14:	4b19      	ldr	r3, [pc, #100]	; (8000c7c <EXTI15_10_IRQHandler+0xc0>)
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	4798      	blx	r3
	if(EXTI->PR & 1<<13){	EXTI->PR |= ( 1 << 13 ) ;	GP_IRQ_CallBack[13]() ; }
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c1c:	695b      	ldr	r3, [r3, #20]
 8000c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d008      	beq.n	8000c38 <EXTI15_10_IRQHandler+0x7c>
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c30:	6153      	str	r3, [r2, #20]
 8000c32:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <EXTI15_10_IRQHandler+0xc0>)
 8000c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c36:	4798      	blx	r3
	if(EXTI->PR & 1<<14){	EXTI->PR |= ( 1 << 14 ) ;	GP_IRQ_CallBack[14]() ; }
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c3a:	695b      	ldr	r3, [r3, #20]
 8000c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d008      	beq.n	8000c56 <EXTI15_10_IRQHandler+0x9a>
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c4e:	6153      	str	r3, [r2, #20]
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <EXTI15_10_IRQHandler+0xc0>)
 8000c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c54:	4798      	blx	r3
	if(EXTI->PR & 1<<15){	EXTI->PR |= ( 1 << 15 ) ;	GP_IRQ_CallBack[15]() ; }
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d008      	beq.n	8000c74 <EXTI15_10_IRQHandler+0xb8>
 8000c62:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <EXTI15_10_IRQHandler+0xbc>)
 8000c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c6c:	6153      	str	r3, [r2, #20]
 8000c6e:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <EXTI15_10_IRQHandler+0xc0>)
 8000c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c72:	4798      	blx	r3
}
 8000c74:	bf00      	nop
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40010400 	.word	0x40010400
 8000c7c:	20000028 	.word	0x20000028

08000c80 <EXTI_GPIO_Init>:
* Note			-none
*/


void EXTI_GPIO_Init(EXTI__PIN_Config_t* EXTI_Config)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	UPDATE_EXTI(EXTI_Config) ;
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff fe0b 	bl	80008a4 <UPDATE_EXTI>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <Get_CRLH_Position>:
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
//	Generic Functions
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


uint8_t Get_CRLH_Position(uint16_t PinNum){
 8000c96:	b480      	push	{r7}
 8000c98:	b083      	sub	sp, #12
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	80fb      	strh	r3, [r7, #6]
	switch (PinNum) {
 8000ca0:	88fb      	ldrh	r3, [r7, #6]
 8000ca2:	2b80      	cmp	r3, #128	; 0x80
 8000ca4:	d042      	beq.n	8000d2c <Get_CRLH_Position+0x96>
 8000ca6:	2b80      	cmp	r3, #128	; 0x80
 8000ca8:	dc11      	bgt.n	8000cce <Get_CRLH_Position+0x38>
 8000caa:	2b08      	cmp	r3, #8
 8000cac:	d036      	beq.n	8000d1c <Get_CRLH_Position+0x86>
 8000cae:	2b08      	cmp	r3, #8
 8000cb0:	dc06      	bgt.n	8000cc0 <Get_CRLH_Position+0x2a>
 8000cb2:	2b02      	cmp	r3, #2
 8000cb4:	d02e      	beq.n	8000d14 <Get_CRLH_Position+0x7e>
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d02e      	beq.n	8000d18 <Get_CRLH_Position+0x82>
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d028      	beq.n	8000d10 <Get_CRLH_Position+0x7a>
 8000cbe:	e047      	b.n	8000d50 <Get_CRLH_Position+0xba>
 8000cc0:	2b20      	cmp	r3, #32
 8000cc2:	d02f      	beq.n	8000d24 <Get_CRLH_Position+0x8e>
 8000cc4:	2b40      	cmp	r3, #64	; 0x40
 8000cc6:	d02f      	beq.n	8000d28 <Get_CRLH_Position+0x92>
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	d029      	beq.n	8000d20 <Get_CRLH_Position+0x8a>
 8000ccc:	e040      	b.n	8000d50 <Get_CRLH_Position+0xba>
 8000cce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cd2:	d033      	beq.n	8000d3c <Get_CRLH_Position+0xa6>
 8000cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cd8:	dc09      	bgt.n	8000cee <Get_CRLH_Position+0x58>
 8000cda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cde:	d029      	beq.n	8000d34 <Get_CRLH_Position+0x9e>
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	d028      	beq.n	8000d38 <Get_CRLH_Position+0xa2>
 8000ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000cea:	d021      	beq.n	8000d30 <Get_CRLH_Position+0x9a>
 8000cec:	e030      	b.n	8000d50 <Get_CRLH_Position+0xba>
 8000cee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf2:	d027      	beq.n	8000d44 <Get_CRLH_Position+0xae>
 8000cf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000cf8:	dc03      	bgt.n	8000d02 <Get_CRLH_Position+0x6c>
 8000cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cfe:	d01f      	beq.n	8000d40 <Get_CRLH_Position+0xaa>
 8000d00:	e026      	b.n	8000d50 <Get_CRLH_Position+0xba>
 8000d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000d06:	d01f      	beq.n	8000d48 <Get_CRLH_Position+0xb2>
 8000d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d0c:	d01e      	beq.n	8000d4c <Get_CRLH_Position+0xb6>
 8000d0e:	e01f      	b.n	8000d50 <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	e01e      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000d14:	2304      	movs	r3, #4
 8000d16:	e01c      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	e01a      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000d1c:	230c      	movs	r3, #12
 8000d1e:	e018      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000d20:	2310      	movs	r3, #16
 8000d22:	e016      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000d24:	2314      	movs	r3, #20
 8000d26:	e014      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000d28:	2318      	movs	r3, #24
 8000d2a:	e012      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000d2c:	231c      	movs	r3, #28
 8000d2e:	e010      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	e00e      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000d34:	2304      	movs	r3, #4
 8000d36:	e00c      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000d38:	2308      	movs	r3, #8
 8000d3a:	e00a      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000d3c:	230c      	movs	r3, #12
 8000d3e:	e008      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000d40:	2310      	movs	r3, #16
 8000d42:	e006      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000d44:	2314      	movs	r3, #20
 8000d46:	e004      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000d48:	2318      	movs	r3, #24
 8000d4a:	e002      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000d4c:	231c      	movs	r3, #28
 8000d4e:	e000      	b.n	8000d52 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <GPIO_Init>:
* Note			-Stm32F103x8 MCU has GPIO A,B,C,D,E Modules
*/


void GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PIN_Config* PinConfig )
{
 8000d5c:	b590      	push	{r4, r7, lr}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	// Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* ConfigReg = NULL ;
 8000d66:	2300      	movs	r3, #0
 8000d68:	60fb      	str	r3, [r7, #12]
	volatile uint8_t Config_PIN = 0 ;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	72fb      	strb	r3, [r7, #11]

	ConfigReg =(PinConfig->pin_number < GPIO_PIN_8 )? &GPIOx->CRL : &GPIOx->CRH ;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	2bff      	cmp	r3, #255	; 0xff
 8000d74:	d801      	bhi.n	8000d7a <GPIO_Init+0x1e>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <GPIO_Init+0x22>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	60fb      	str	r3, [r7, #12]

	// Clear CNF & MODE
	(*ConfigReg) &= ~(0xF <<Get_CRLH_Position(PinConfig->pin_number)) ;
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff86 	bl	8000c96 <Get_CRLH_Position>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4093      	lsls	r3, r2
 8000d92:	43da      	mvns	r2, r3
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	401a      	ands	r2, r3
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	601a      	str	r2, [r3, #0]

	// PIN is Output
	if((PinConfig->pin_mode == GPIO_MODE_Output_PUSH_PULL) || (PinConfig->pin_mode == GPIO_MODE_Output_OPEN_DRAIN) ||(PinConfig->pin_mode == GPIO_MODE_Output_AF_PUSH_PULL) ||(PinConfig->pin_mode == GPIO_MODE_Output_AF_OPEN_DRAIN))
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	885b      	ldrh	r3, [r3, #2]
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	d00b      	beq.n	8000dbe <GPIO_Init+0x62>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	885b      	ldrh	r3, [r3, #2]
 8000daa:	2b05      	cmp	r3, #5
 8000dac:	d007      	beq.n	8000dbe <GPIO_Init+0x62>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	885b      	ldrh	r3, [r3, #2]
 8000db2:	2b06      	cmp	r3, #6
 8000db4:	d003      	beq.n	8000dbe <GPIO_Init+0x62>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	885b      	ldrh	r3, [r3, #2]
 8000dba:	2b07      	cmp	r3, #7
 8000dbc:	d10f      	bne.n	8000dde <GPIO_Init+0x82>
	{
		// Set CNF & MODE
		Config_PIN = ((((PinConfig->pin_mode -4 ) << 2) | (PinConfig->pin_speed)) & 0xF);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	885b      	ldrh	r3, [r3, #2]
 8000dc2:	3b04      	subs	r3, #4
 8000dc4:	009b      	lsls	r3, r3, #2
 8000dc6:	b25a      	sxtb	r2, r3
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	889b      	ldrh	r3, [r3, #4]
 8000dcc:	b25b      	sxtb	r3, r3
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f003 030f 	and.w	r3, r3, #15
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	72fb      	strb	r3, [r7, #11]
 8000ddc:	e026      	b.n	8000e2c <GPIO_Init+0xd0>

	}
	else //PIN is Input
	{
		// Input Analog || Input floating
		if((PinConfig->pin_mode == GPIO_MODE_Analog) || (PinConfig->pin_mode == GPIO_MODE_Floating_Input))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	885b      	ldrh	r3, [r3, #2]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <GPIO_Init+0x92>
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	885b      	ldrh	r3, [r3, #2]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d108      	bne.n	8000e00 <GPIO_Init+0xa4>
		{
			// Set CNF & MODE
			Config_PIN = ((PinConfig->pin_mode << 2) & 0xF) ;
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	885b      	ldrh	r3, [r3, #2]
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	f003 030f 	and.w	r3, r3, #15
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	72fb      	strb	r3, [r7, #11]
 8000dfe:	e015      	b.n	8000e2c <GPIO_Init+0xd0>
		}
		else // Input pull-down || Input pull-up
		{
			// Set CNF & MODE
			Config_PIN = ((GPIO_MODE_Input_PUll_UP << 2) & 0xF) ;
 8000e00:	2308      	movs	r3, #8
 8000e02:	72fb      	strb	r3, [r7, #11]

			if(PinConfig->pin_mode == GPIO_MODE_Input_PUll_DOWN)// Input pull-down
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	885b      	ldrh	r3, [r3, #2]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d108      	bne.n	8000e1e <GPIO_Init+0xc2>
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->ODR &= ~( PinConfig->pin_number ) ;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	683a      	ldr	r2, [r7, #0]
 8000e12:	8812      	ldrh	r2, [r2, #0]
 8000e14:	43d2      	mvns	r2, r2
 8000e16:	401a      	ands	r2, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	e006      	b.n	8000e2c <GPIO_Init+0xd0>
			}
			else // Input pull-up
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |=  PinConfig->pin_number ;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	683a      	ldr	r2, [r7, #0]
 8000e24:	8812      	ldrh	r2, [r2, #0]
 8000e26:	431a      	orrs	r2, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// write on the CRL or CRH
	*ConfigReg |= (Config_PIN <<Get_CRLH_Position(PinConfig->pin_number));
 8000e2c:	7afb      	ldrb	r3, [r7, #11]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	461c      	mov	r4, r3
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff2d 	bl	8000c96 <Get_CRLH_Position>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	fa04 f203 	lsl.w	r2, r4, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	431a      	orrs	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	601a      	str	r2, [r3, #0]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd90      	pop	{r4, r7, pc}

08000e54 <GPIO_WritePin>:
* @retval 		-none
* Note			-none
*/

void GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber , uint8_t Value )
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	807b      	strh	r3, [r7, #2]
 8000e60:	4613      	mov	r3, r2
 8000e62:	707b      	strb	r3, [r7, #1]
	if( Value == GPIO_PIN_SET)
 8000e64:	787b      	ldrb	r3, [r7, #1]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d103      	bne.n	8000e72 <GPIO_WritePin+0x1e>
	{
	// Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	// These bits are write-only and can be accessed in Word mode only.
	// 0: No action on the corresponding ODRx bit
	// 1: Set the corresponding ODRx bit
		GPIOx->BSRR =(uint32_t)PinNumber ;
 8000e6a:	887a      	ldrh	r2, [r7, #2]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	611a      	str	r2, [r3, #16]
	// These bits are write-only and can be accessed in Word mode only.
	// 0: No action on the corresponding ODRx bit
	// 1: Reset the corresponding ODRx bit
		GPIOx->BRR =(uint16_t)PinNumber ;
	}
}
 8000e70:	e002      	b.n	8000e78 <GPIO_WritePin+0x24>
		GPIOx->BRR =(uint16_t)PinNumber ;
 8000e72:	887a      	ldrh	r2, [r7, #2]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	615a      	str	r2, [r3, #20]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
	...

08000e84 <__libc_init_array>:
 8000e84:	b570      	push	{r4, r5, r6, lr}
 8000e86:	2500      	movs	r5, #0
 8000e88:	4e0c      	ldr	r6, [pc, #48]	; (8000ebc <__libc_init_array+0x38>)
 8000e8a:	4c0d      	ldr	r4, [pc, #52]	; (8000ec0 <__libc_init_array+0x3c>)
 8000e8c:	1ba4      	subs	r4, r4, r6
 8000e8e:	10a4      	asrs	r4, r4, #2
 8000e90:	42a5      	cmp	r5, r4
 8000e92:	d109      	bne.n	8000ea8 <__libc_init_array+0x24>
 8000e94:	f000 f81a 	bl	8000ecc <_init>
 8000e98:	2500      	movs	r5, #0
 8000e9a:	4e0a      	ldr	r6, [pc, #40]	; (8000ec4 <__libc_init_array+0x40>)
 8000e9c:	4c0a      	ldr	r4, [pc, #40]	; (8000ec8 <__libc_init_array+0x44>)
 8000e9e:	1ba4      	subs	r4, r4, r6
 8000ea0:	10a4      	asrs	r4, r4, #2
 8000ea2:	42a5      	cmp	r5, r4
 8000ea4:	d105      	bne.n	8000eb2 <__libc_init_array+0x2e>
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
 8000ea8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eac:	4798      	blx	r3
 8000eae:	3501      	adds	r5, #1
 8000eb0:	e7ee      	b.n	8000e90 <__libc_init_array+0xc>
 8000eb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb6:	4798      	blx	r3
 8000eb8:	3501      	adds	r5, #1
 8000eba:	e7f2      	b.n	8000ea2 <__libc_init_array+0x1e>
 8000ebc:	08000f0c 	.word	0x08000f0c
 8000ec0:	08000f0c 	.word	0x08000f0c
 8000ec4:	08000f0c 	.word	0x08000f0c
 8000ec8:	08000f10 	.word	0x08000f10

08000ecc <_init>:
 8000ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ece:	bf00      	nop
 8000ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ed2:	bc08      	pop	{r3}
 8000ed4:	469e      	mov	lr, r3
 8000ed6:	4770      	bx	lr

08000ed8 <_fini>:
 8000ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eda:	bf00      	nop
 8000edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ede:	bc08      	pop	{r3}
 8000ee0:	469e      	mov	lr, r3
 8000ee2:	4770      	bx	lr
