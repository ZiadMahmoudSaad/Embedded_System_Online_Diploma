
Task 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000224  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006d7  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005a7  00000000  00000000  0000095f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000334  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000123c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035b  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  000015cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001733  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 67 00 	call	0xce	; 0xce <main>
  64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <GPIO_init>:
}

void GPIO_init()
{
	//set PORTD4,5,6,7 as an OUTPUT
	SETBIT(DDRD,4);
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	80 61       	ori	r24, 0x10	; 16
  70:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,5);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	80 62       	ori	r24, 0x20	; 32
  76:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,6);
  78:	81 b3       	in	r24, 0x11	; 17
  7a:	80 64       	ori	r24, 0x40	; 64
  7c:	81 bb       	out	0x11, r24	; 17
	SETBIT(DDRD,7);
  7e:	81 b3       	in	r24, 0x11	; 17
  80:	80 68       	ori	r24, 0x80	; 128
  82:	81 bb       	out	0x11, r24	; 17
	
	//set PORTD4,5,6,7 as an INPUT(PULL-UP)
	RESETBIT(DDRD,0);
  84:	81 b3       	in	r24, 0x11	; 17
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	81 bb       	out	0x11, r24	; 17
	RESETBIT(DDRD,1);
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	81 bb       	out	0x11, r24	; 17
	RESETBIT(DDRD,2);
  90:	81 b3       	in	r24, 0x11	; 17
  92:	8b 7f       	andi	r24, 0xFB	; 251
  94:	81 bb       	out	0x11, r24	; 17
	SETBIT(PORTD,0);
  96:	82 b3       	in	r24, 0x12	; 18
  98:	81 60       	ori	r24, 0x01	; 1
  9a:	82 bb       	out	0x12, r24	; 18
	SETBIT(PORTD,1);
  9c:	82 b3       	in	r24, 0x12	; 18
  9e:	82 60       	ori	r24, 0x02	; 2
  a0:	82 bb       	out	0x12, r24	; 18
	SETBIT(PORTD,2);
  a2:	82 b3       	in	r24, 0x12	; 18
  a4:	84 60       	ori	r24, 0x04	; 4
  a6:	82 bb       	out	0x12, r24	; 18
	
	//set PORTC2,3,4,5,6,7 as an OUTPUT
	SETBIT(DDRC,2);
  a8:	84 b3       	in	r24, 0x14	; 20
  aa:	84 60       	ori	r24, 0x04	; 4
  ac:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,3);
  ae:	84 b3       	in	r24, 0x14	; 20
  b0:	88 60       	ori	r24, 0x08	; 8
  b2:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,4);
  b4:	84 b3       	in	r24, 0x14	; 20
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,5);
  ba:	84 b3       	in	r24, 0x14	; 20
  bc:	80 62       	ori	r24, 0x20	; 32
  be:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,6);
  c0:	84 b3       	in	r24, 0x14	; 20
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	84 bb       	out	0x14, r24	; 20
	SETBIT(DDRC,7);
  c6:	84 b3       	in	r24, 0x14	; 20
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	84 bb       	out	0x14, r24	; 20
  cc:	08 95       	ret

000000ce <main>:
void GPIO_init();


int main(void)
{
	GPIO_init();
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <GPIO_init>
	sint8_t i,j,t,flag=5;
  d2:	55 e0       	ldi	r21, 0x05	; 5
    while (1) 
    {
		//BUZZER
		if(READBIT(PIND,0)==1)
  d4:	80 9b       	sbis	0x10, 0	; 16
  d6:	11 c0       	rjmp	.+34     	; 0xfa <main+0x2c>
		{
			SETBIT(PORTD,4);
  d8:	82 b3       	in	r24, 0x12	; 18
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	64 e3       	ldi	r22, 0x34	; 52
  e2:	8c e0       	ldi	r24, 0x0C	; 12
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	60 40       	sbci	r22, 0x00	; 0
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x16>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x20>
  ee:	00 00       	nop
			_delay_ms(500);
			RESETBIT(PORTD,4);
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	8f 7e       	andi	r24, 0xEF	; 239
  f4:	82 bb       	out	0x12, r24	; 18
			while(READBIT(PIND,0)==1);
  f6:	80 99       	sbic	0x10, 0	; 16
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x28>
		}
		
		//LED TOGGLE
		if(READBIT(PIND,1)==1)
  fa:	81 9b       	sbis	0x10, 1	; 16
  fc:	1b c0       	rjmp	.+54     	; 0x134 <main+0x66>
		{
			if(flag!=8)
  fe:	58 30       	cpi	r21, 0x08	; 8
 100:	69 f0       	breq	.+26     	; 0x11c <main+0x4e>
			{
				SETBIT(PORTD,flag);
 102:	22 b3       	in	r18, 0x12	; 18
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	05 2e       	mov	r0, r21
 10a:	02 c0       	rjmp	.+4      	; 0x110 <main+0x42>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	0a 94       	dec	r0
 112:	e2 f7       	brpl	.-8      	; 0x10c <main+0x3e>
 114:	82 2b       	or	r24, r18
 116:	82 bb       	out	0x12, r24	; 18
				flag++;
 118:	5f 5f       	subi	r21, 0xFF	; 255
 11a:	0a c0       	rjmp	.+20     	; 0x130 <main+0x62>
			}
			else
			{
				RESETBIT(PORTD,5);
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	82 bb       	out	0x12, r24	; 18
				RESETBIT(PORTD,6);
 122:	82 b3       	in	r24, 0x12	; 18
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	82 bb       	out	0x12, r24	; 18
				RESETBIT(PORTD,7);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	8f 77       	andi	r24, 0x7F	; 127
 12c:	82 bb       	out	0x12, r24	; 18
				flag=5;	
 12e:	55 e0       	ldi	r21, 0x05	; 5
			}
			while(READBIT(PIND,1)==1);
 130:	81 99       	sbic	0x10, 1	; 16
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0x62>
		}
		
		//7segment
		if(READBIT(PIND,2)==1)
 134:	82 99       	sbic	0x10, 2	; 16
 136:	2b c0       	rjmp	.+86     	; 0x18e <main+0xc0>
 138:	cd cf       	rjmp	.-102    	; 0xd4 <main+0x6>
			{
				for(j=0;j<10;j++)
				{
					for (t=0;t<10;t++)
					{
						PORTC = 0b1011 |(i<<4);
 13a:	60 e1       	ldi	r22, 0x10	; 16
 13c:	46 02       	muls	r20, r22
 13e:	c0 01       	movw	r24, r0
 140:	11 24       	eor	r1, r1
 142:	8b 60       	ori	r24, 0x0B	; 11
 144:	85 bb       	out	0x15, r24	; 21
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	99 ef       	ldi	r25, 0xF9	; 249
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	90 40       	sbci	r25, 0x00	; 0
 150:	60 40       	sbci	r22, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x7e>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x88>
 156:	00 00       	nop
						_delay_ms(40);
						PORTC = 0b0111 |(j<<4);
 158:	60 e1       	ldi	r22, 0x10	; 16
 15a:	36 02       	muls	r19, r22
 15c:	c0 01       	movw	r24, r0
 15e:	11 24       	eor	r1, r1
 160:	87 60       	ori	r24, 0x07	; 7
 162:	85 bb       	out	0x15, r24	; 21
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	99 ef       	ldi	r25, 0xF9	; 249
 168:	60 e0       	ldi	r22, 0x00	; 0
 16a:	81 50       	subi	r24, 0x01	; 1
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	60 40       	sbci	r22, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x9c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0xa6>
 174:	00 00       	nop
		{
			for(i=0;i<10;i++)
			{
				for(j=0;j<10;j++)
				{
					for (t=0;t<10;t++)
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	01 c0       	rjmp	.+2      	; 0x17c <main+0xae>
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	2a 30       	cpi	r18, 0x0A	; 10
 17e:	ec f2       	brlt	.-70     	; 0x13a <main+0x6c>
		//7segment
		if(READBIT(PIND,2)==1)
		{
			for(i=0;i<10;i++)
			{
				for(j=0;j<10;j++)
 180:	3f 5f       	subi	r19, 0xFF	; 255
 182:	01 c0       	rjmp	.+2      	; 0x186 <main+0xb8>
 184:	30 e0       	ldi	r19, 0x00	; 0
 186:	3a 30       	cpi	r19, 0x0A	; 10
 188:	c4 f3       	brlt	.-16     	; 0x17a <main+0xac>
		}
		
		//7segment
		if(READBIT(PIND,2)==1)
		{
			for(i=0;i<10;i++)
 18a:	4f 5f       	subi	r20, 0xFF	; 255
 18c:	01 c0       	rjmp	.+2      	; 0x190 <main+0xc2>
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	4a 30       	cpi	r20, 0x0A	; 10
 192:	c4 f3       	brlt	.-16     	; 0x184 <main+0xb6>
						_delay_ms(40);
					}
					
				}
			}
			PORTC =0;
 194:	15 ba       	out	0x15, r1	; 21
			while(READBIT(PIND,2)==1);
 196:	82 99       	sbic	0x10, 2	; 16
 198:	fe cf       	rjmp	.-4      	; 0x196 <main+0xc8>
 19a:	9c cf       	rjmp	.-200    	; 0xd4 <main+0x6>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
