
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000250  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b2f  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000070f  00000000  00000000  00000eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000563  00000000  00000000  000015fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d6  00000000  00000000  00001c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000040e  00000000  00000000  00002022  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d5 00 	call	0x1aa	; 0x1aa <main>
  7a:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_kick>:
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
}

void LCD_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	84 60       	ori	r24, 0x04	; 4
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f ec       	ldi	r24, 0xCF	; 207
  8a:	97 e0       	ldi	r25, 0x07	; 7
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_kick+0x10>
  92:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_isbusy>:
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_isbusy()
{
	LCD_DATA_DATADir &= ~(0xFF<<DATA_SHIFT);
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= 1<<RW_SWITCH ;
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	82 60       	ori	r24, 0x02	; 2
  a4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_SWITCH);
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8e 7f       	andi	r24, 0xFE	; 254
  aa:	88 bb       	out	0x18, r24	; 24
	LCD_kick();
  ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	LCD_DATA_DATADir |= (0xFF<<DATA_SHIFT);
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	08 95       	ret

000000be <LCD_WRITE_COMMAND>:
}

void LCD_WRITE_COMMAND(unsigned char command)
{
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	LCD_isbusy();
  c2:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_DATA = command ;
  c6:	cb bb       	out	0x1b, r28	; 27
		LCD_kick();
  c8:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
		LCD_DATA =  (LCD_DATA & 0x0F) | (command << 4) ;
		LCD_kick();
	#endif

	
}
  cc:	cf 91       	pop	r28
  ce:	08 95       	ret

000000d0 <LCD_clear_screen>:
 */ 
#include "LCD.h"

void LCD_clear_screen(void)
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
  d6:	08 95       	ret

000000d8 <LCD_init>:
  d8:	8f e3       	ldi	r24, 0x3F	; 63
  da:	9c e9       	ldi	r25, 0x9C	; 156
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_init+0x4>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_init+0xa>
  e2:	00 00       	nop
}

void LCD_init()
{
	_delay_ms(20);
	LCD_CTRL_DATADir |=(1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH) ;
  e4:	87 b3       	in	r24, 0x17	; 23
  e6:	87 60       	ori	r24, 0x07	; 7
  e8:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &=~((1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH)) ;
  ea:	88 b3       	in	r24, 0x18	; 24
  ec:	88 7f       	andi	r24, 0xF8	; 248
  ee:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_DATADir = 0xFF ;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	8a bb       	out	0x1a, r24	; 26
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
  fa:	8f e1       	ldi	r24, 0x1F	; 31
  fc:	9e e4       	ldi	r25, 0x4E	; 78
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_init+0x26>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_init+0x2c>
 104:	00 00       	nop
	_delay_ms(10);
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 106:	88 e3       	ldi	r24, 0x38	; 56
 108:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	#endif
	
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 10c:	86 e0       	ldi	r24, 0x06	; 6
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 118:	8f e0       	ldi	r24, 0x0F	; 15
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 11e:	08 95       	ret

00000120 <LCD_WRITE_CHAR>:

	
}

void LCD_WRITE_CHAR(char character)
{
 120:	cf 93       	push	r28
 122:	c8 2f       	mov	r28, r24
	LCD_isbusy();
 124:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_CTRL |= 1<<RS_SWITCH ;
 128:	88 b3       	in	r24, 0x18	; 24
 12a:	81 60       	ori	r24, 0x01	; 1
 12c:	88 bb       	out	0x18, r24	; 24
		LCD_DATA = character ;
 12e:	cb bb       	out	0x1b, r28	; 27
		LCD_kick();
 130:	0e 94 41 00 	call	0x82	; 0x82 <LCD_kick>
	LCD_DATA =  (LCD_DATA & 0x0F) | (character & 0xF0) ;
	LCD_kick();
	LCD_DATA =  (LCD_DATA & 0x0F) | (character << 4) ;
	LCD_kick();
	#endif
}
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if(line==1 && position>=0 && position<16)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	39 f4       	brne	.+14     	; 0x14a <LCD_GOTO_XY+0x12>
 13c:	60 31       	cpi	r22, 0x10	; 16
 13e:	28 f4       	brcc	.+10     	; 0x14a <LCD_GOTO_XY+0x12>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 140:	80 e8       	ldi	r24, 0x80	; 128
 142:	86 0f       	add	r24, r22
 144:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 148:	08 95       	ret
	}else if(line==2)
 14a:	82 30       	cpi	r24, 0x02	; 2
 14c:	21 f4       	brne	.+8      	; 0x156 <LCD_GOTO_XY+0x1e>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);	
 14e:	80 ec       	ldi	r24, 0xC0	; 192
 150:	86 0f       	add	r24, r22
 152:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 156:	08 95       	ret

00000158 <LCD_WRITE_STRING>:
	}
}

void LCD_WRITE_STRING(char* string)
{
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	8c 01       	movw	r16, r24
	int count=0;
 162:	c0 e0       	ldi	r28, 0x00	; 0
 164:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string!=0)
 166:	18 c0       	rjmp	.+48     	; 0x198 <LCD_WRITE_STRING+0x40>
	{
		count++;
 168:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 16a:	0f 5f       	subi	r16, 0xFF	; 255
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
 16e:	0e 94 90 00 	call	0x120	; 0x120 <LCD_WRITE_CHAR>
		if (count == 16)
 172:	c0 31       	cpi	r28, 0x10	; 16
 174:	d1 05       	cpc	r29, r1
 176:	29 f4       	brne	.+10     	; 0x182 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_GOTO_XY>
 180:	0b c0       	rjmp	.+22     	; 0x198 <LCD_WRITE_STRING+0x40>
		}else if (count == 32)
 182:	c0 32       	cpi	r28, 0x20	; 32
 184:	d1 05       	cpc	r29, r1
 186:	41 f4       	brne	.+16     	; 0x198 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 188:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_GOTO_XY>
			count=0;
 194:	c0 e0       	ldi	r28, 0x00	; 0
 196:	d0 e0       	ldi	r29, 0x00	; 0
}

void LCD_WRITE_STRING(char* string)
{
	int count=0;
	while(*string!=0)
 198:	f8 01       	movw	r30, r16
 19a:	80 81       	ld	r24, Z
 19c:	81 11       	cpse	r24, r1
 19e:	e4 cf       	rjmp	.-56     	; 0x168 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count=0;
		}
	}
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <main>:
 * Author : Ziad Mahmoud Saad
 */ 

#include "LCD_Driver/LCD.h"
int main(void)
{
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	62 97       	sbiw	r28, 0x12	; 18
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
	char str[]="Ziad Mahmoud Saad";
 1be:	82 e1       	ldi	r24, 0x12	; 18
 1c0:	e0 e6       	ldi	r30, 0x60	; 96
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	de 01       	movw	r26, r28
 1c6:	11 96       	adiw	r26, 0x01	; 1
 1c8:	01 90       	ld	r0, Z+
 1ca:	0d 92       	st	X+, r0
 1cc:	8a 95       	dec	r24
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x1e>
	LCD_init();
 1d0:	0e 94 6c 00 	call	0xd8	; 0xd8 <LCD_init>
    while (1) 
    {
		LCD_WRITE_CHAR('A');
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 90 00 	call	0x120	; 0x120 <LCD_WRITE_CHAR>
 1da:	2f ef       	ldi	r18, 0xFF	; 255
 1dc:	84 e3       	ldi	r24, 0x34	; 52
 1de:	9c e0       	ldi	r25, 0x0C	; 12
 1e0:	21 50       	subi	r18, 0x01	; 1
 1e2:	80 40       	sbci	r24, 0x00	; 0
 1e4:	90 40       	sbci	r25, 0x00	; 0
 1e6:	e1 f7       	brne	.-8      	; 0x1e0 <main+0x36>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <main+0x40>
 1ea:	00 00       	nop
		_delay_ms(500);
		LCD_WRITE_CHAR('B');
 1ec:	82 e4       	ldi	r24, 0x42	; 66
 1ee:	0e 94 90 00 	call	0x120	; 0x120 <LCD_WRITE_CHAR>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	9c e0       	ldi	r25, 0x0C	; 12
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <main+0x4e>
 200:	00 c0       	rjmp	.+0      	; 0x202 <main+0x58>
 202:	00 00       	nop
		_delay_ms(500);
		LCD_clear_screen();
 204:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_clear_screen>
 208:	2f ef       	ldi	r18, 0xFF	; 255
 20a:	89 e6       	ldi	r24, 0x69	; 105
 20c:	98 e1       	ldi	r25, 0x18	; 24
 20e:	21 50       	subi	r18, 0x01	; 1
 210:	80 40       	sbci	r24, 0x00	; 0
 212:	90 40       	sbci	r25, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <main+0x64>
 216:	00 c0       	rjmp	.+0      	; 0x218 <main+0x6e>
 218:	00 00       	nop
		_delay_ms(1000);
		LCD_WRITE_STRING(str);
 21a:	ce 01       	movw	r24, r28
 21c:	01 96       	adiw	r24, 0x01	; 1
 21e:	0e 94 ac 00 	call	0x158	; 0x158 <LCD_WRITE_STRING>
 222:	2f ef       	ldi	r18, 0xFF	; 255
 224:	89 e6       	ldi	r24, 0x69	; 105
 226:	98 e1       	ldi	r25, 0x18	; 24
 228:	21 50       	subi	r18, 0x01	; 1
 22a:	80 40       	sbci	r24, 0x00	; 0
 22c:	90 40       	sbci	r25, 0x00	; 0
 22e:	e1 f7       	brne	.-8      	; 0x228 <main+0x7e>
 230:	00 c0       	rjmp	.+0      	; 0x232 <main+0x88>
 232:	00 00       	nop
		_delay_ms(1000);
		LCD_clear_screen();
 234:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_clear_screen>
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	89 e6       	ldi	r24, 0x69	; 105
 23c:	98 e1       	ldi	r25, 0x18	; 24
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x94>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x9e>
 248:	00 00       	nop
 24a:	c4 cf       	rjmp	.-120    	; 0x1d4 <main+0x2a>

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
