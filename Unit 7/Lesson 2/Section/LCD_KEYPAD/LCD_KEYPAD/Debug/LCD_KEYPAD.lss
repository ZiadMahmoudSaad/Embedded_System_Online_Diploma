
LCD_KEYPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000314  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000314  00000388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000404  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b45  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000771  00000000  00000000  00000fe9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000731  00000000  00000000  0000175a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001e8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000436  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031d  00000000  00000000  000023d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  000026ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 65 01 	call	0x2ca	; 0x2ca <main>
  7a:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Keypad_init>:
int Keypad_Row[] = {R0, R1, R2, R3};
int Keypad_Col[] = {C0, C1, C2, C3};

void Keypad_init(void)
{
	KEYPAD_DATADir &= ~(0xF);
  82:	84 b3       	in	r24, 0x14	; 20
  84:	80 7f       	andi	r24, 0xF0	; 240
  86:	84 bb       	out	0x14, r24	; 20
	KEYPAD_DATADir |= 0xF0;
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	80 6f       	ori	r24, 0xF0	; 240
  8c:	84 bb       	out	0x14, r24	; 20
	KEYPAD_PORT =0xFf;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	85 bb       	out	0x15, r24	; 21
  92:	08 95       	ret

00000094 <Keypad_getkey>:
}
char Keypad_getkey(void)
{
	int i,j;
	KEYPAD_PORT |=(1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
  94:	85 b3       	in	r24, 0x15	; 21
  96:	80 6f       	ori	r24, 0xF0	; 240
  98:	85 bb       	out	0x15, r24	; 21
	for(i=0;i<4;i++)
  9a:	60 e0       	ldi	r22, 0x00	; 0
  9c:	70 e0       	ldi	r23, 0x00	; 0
  9e:	94 c0       	rjmp	.+296    	; 0x1c8 <Keypad_getkey+0x134>
	{
		KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
  a0:	25 b3       	in	r18, 0x15	; 21
  a2:	fb 01       	movw	r30, r22
  a4:	ee 0f       	add	r30, r30
  a6:	ff 1f       	adc	r31, r31
  a8:	e0 5a       	subi	r30, 0xA0	; 160
  aa:	ff 4f       	sbci	r31, 0xFF	; 255
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	00 80       	ld	r0, Z
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <Keypad_getkey+0x24>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	0a 94       	dec	r0
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <Keypad_getkey+0x20>
  bc:	80 95       	com	r24
  be:	82 23       	and	r24, r18
  c0:	85 bb       	out	0x15, r24	; 21
		for (j=0;j<4;j++)
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	69 c0       	rjmp	.+210    	; 0x19a <Keypad_getkey+0x106>
		{
			if (!(KEYPAD_PIN & (1 << Keypad_Row[j])))
  c8:	83 b3       	in	r24, 0x13	; 19
  ca:	fa 01       	movw	r30, r20
  cc:	ee 0f       	add	r30, r30
  ce:	ff 1f       	adc	r31, r31
  d0:	e8 59       	subi	r30, 0x98	; 152
  d2:	ff 4f       	sbci	r31, 0xFF	; 255
  d4:	20 81       	ld	r18, Z
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 2e       	mov	r0, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <Keypad_getkey+0x4c>
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <Keypad_getkey+0x48>
  e4:	80 fd       	sbrc	r24, 0
  e6:	57 c0       	rjmp	.+174    	; 0x196 <Keypad_getkey+0x102>
			{
				while(!(KEYPAD_PIN & (1 << Keypad_Row[j])));
  e8:	83 b3       	in	r24, 0x13	; 19
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	02 2e       	mov	r0, r18
  ee:	02 c0       	rjmp	.+4      	; 0xf4 <Keypad_getkey+0x60>
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	0a 94       	dec	r0
  f6:	e2 f7       	brpl	.-8      	; 0xf0 <Keypad_getkey+0x5c>
  f8:	80 ff       	sbrs	r24, 0
  fa:	f6 cf       	rjmp	.-20     	; 0xe8 <Keypad_getkey+0x54>
				switch(i)
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	71 05       	cpc	r23, r1
 100:	e1 f0       	breq	.+56     	; 0x13a <Keypad_getkey+0xa6>
 102:	24 f4       	brge	.+8      	; 0x10c <Keypad_getkey+0x78>
 104:	61 15       	cp	r22, r1
 106:	71 05       	cpc	r23, r1
 108:	41 f0       	breq	.+16     	; 0x11a <Keypad_getkey+0x86>
 10a:	45 c0       	rjmp	.+138    	; 0x196 <Keypad_getkey+0x102>
 10c:	62 30       	cpi	r22, 0x02	; 2
 10e:	71 05       	cpc	r23, r1
 110:	21 f1       	breq	.+72     	; 0x15a <Keypad_getkey+0xc6>
 112:	63 30       	cpi	r22, 0x03	; 3
 114:	71 05       	cpc	r23, r1
 116:	89 f1       	breq	.+98     	; 0x17a <Keypad_getkey+0xe6>
 118:	3e c0       	rjmp	.+124    	; 0x196 <Keypad_getkey+0x102>
				{
					case 0:
						if(j==0) return '7';
 11a:	41 15       	cp	r20, r1
 11c:	51 05       	cpc	r21, r1
 11e:	09 f4       	brne	.+2      	; 0x122 <Keypad_getkey+0x8e>
 120:	59 c0       	rjmp	.+178    	; 0x1d4 <Keypad_getkey+0x140>
						else if(j==1) return '4';
 122:	41 30       	cpi	r20, 0x01	; 1
 124:	51 05       	cpc	r21, r1
 126:	09 f4       	brne	.+2      	; 0x12a <Keypad_getkey+0x96>
 128:	57 c0       	rjmp	.+174    	; 0x1d8 <Keypad_getkey+0x144>
						else if(j==2) return '1';
 12a:	42 30       	cpi	r20, 0x02	; 2
 12c:	51 05       	cpc	r21, r1
 12e:	09 f4       	brne	.+2      	; 0x132 <Keypad_getkey+0x9e>
 130:	55 c0       	rjmp	.+170    	; 0x1dc <Keypad_getkey+0x148>
						else if(j==3) return '?';
 132:	43 30       	cpi	r20, 0x03	; 3
 134:	51 05       	cpc	r21, r1
 136:	79 f5       	brne	.+94     	; 0x196 <Keypad_getkey+0x102>
 138:	53 c0       	rjmp	.+166    	; 0x1e0 <Keypad_getkey+0x14c>
					break;
					case 1:
						if(j==0) return '8';
 13a:	41 15       	cp	r20, r1
 13c:	51 05       	cpc	r21, r1
 13e:	09 f4       	brne	.+2      	; 0x142 <Keypad_getkey+0xae>
 140:	51 c0       	rjmp	.+162    	; 0x1e4 <Keypad_getkey+0x150>
						else if(j==1) return '5';
 142:	41 30       	cpi	r20, 0x01	; 1
 144:	51 05       	cpc	r21, r1
 146:	09 f4       	brne	.+2      	; 0x14a <Keypad_getkey+0xb6>
 148:	4f c0       	rjmp	.+158    	; 0x1e8 <Keypad_getkey+0x154>
						else if(j==2) return '2';
 14a:	42 30       	cpi	r20, 0x02	; 2
 14c:	51 05       	cpc	r21, r1
 14e:	09 f4       	brne	.+2      	; 0x152 <Keypad_getkey+0xbe>
 150:	4d c0       	rjmp	.+154    	; 0x1ec <Keypad_getkey+0x158>
						else if(j==3) return '0';
 152:	43 30       	cpi	r20, 0x03	; 3
 154:	51 05       	cpc	r21, r1
 156:	f9 f4       	brne	.+62     	; 0x196 <Keypad_getkey+0x102>
 158:	4b c0       	rjmp	.+150    	; 0x1f0 <Keypad_getkey+0x15c>
					break;
					case 2:
					if(j==0) return '9';
 15a:	41 15       	cp	r20, r1
 15c:	51 05       	cpc	r21, r1
 15e:	09 f4       	brne	.+2      	; 0x162 <Keypad_getkey+0xce>
 160:	49 c0       	rjmp	.+146    	; 0x1f4 <Keypad_getkey+0x160>
					else if(j==1) return '6';
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	51 05       	cpc	r21, r1
 166:	09 f4       	brne	.+2      	; 0x16a <Keypad_getkey+0xd6>
 168:	47 c0       	rjmp	.+142    	; 0x1f8 <Keypad_getkey+0x164>
					else if(j==2) return '3';
 16a:	42 30       	cpi	r20, 0x02	; 2
 16c:	51 05       	cpc	r21, r1
 16e:	09 f4       	brne	.+2      	; 0x172 <Keypad_getkey+0xde>
 170:	45 c0       	rjmp	.+138    	; 0x1fc <Keypad_getkey+0x168>
					else if(j==3) return '=';
 172:	43 30       	cpi	r20, 0x03	; 3
 174:	51 05       	cpc	r21, r1
 176:	79 f4       	brne	.+30     	; 0x196 <Keypad_getkey+0x102>
 178:	43 c0       	rjmp	.+134    	; 0x200 <Keypad_getkey+0x16c>
					break;
					case 3:
					if(j==0) return '/';
 17a:	41 15       	cp	r20, r1
 17c:	51 05       	cpc	r21, r1
 17e:	09 f4       	brne	.+2      	; 0x182 <Keypad_getkey+0xee>
 180:	41 c0       	rjmp	.+130    	; 0x204 <Keypad_getkey+0x170>
					else if(j==1) return '*';
 182:	41 30       	cpi	r20, 0x01	; 1
 184:	51 05       	cpc	r21, r1
 186:	09 f4       	brne	.+2      	; 0x18a <Keypad_getkey+0xf6>
 188:	3f c0       	rjmp	.+126    	; 0x208 <Keypad_getkey+0x174>
					else if(j==2) return '-';
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	51 05       	cpc	r21, r1
 18e:	f1 f1       	breq	.+124    	; 0x20c <Keypad_getkey+0x178>
					else if(j==3) return '+';
 190:	43 30       	cpi	r20, 0x03	; 3
 192:	51 05       	cpc	r21, r1
 194:	e9 f1       	breq	.+122    	; 0x210 <Keypad_getkey+0x17c>
	int i,j;
	KEYPAD_PORT |=(1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
	for(i=0;i<4;i++)
	{
		KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
		for (j=0;j<4;j++)
 196:	4f 5f       	subi	r20, 0xFF	; 255
 198:	5f 4f       	sbci	r21, 0xFF	; 255
 19a:	44 30       	cpi	r20, 0x04	; 4
 19c:	51 05       	cpc	r21, r1
 19e:	0c f4       	brge	.+2      	; 0x1a2 <Keypad_getkey+0x10e>
 1a0:	93 cf       	rjmp	.-218    	; 0xc8 <Keypad_getkey+0x34>
					else if(j==3) return '+';
					break;
				}
			}
		}
		KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
 1a2:	25 b3       	in	r18, 0x15	; 21
 1a4:	fb 01       	movw	r30, r22
 1a6:	ee 0f       	add	r30, r30
 1a8:	ff 1f       	adc	r31, r31
 1aa:	e0 5a       	subi	r30, 0xA0	; 160
 1ac:	ff 4f       	sbci	r31, 0xFF	; 255
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	00 80       	ld	r0, Z
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <Keypad_getkey+0x126>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <Keypad_getkey+0x122>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
}
char Keypad_getkey(void)
{
	int i,j;
	KEYPAD_PORT |=(1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
	for(i=0;i<4;i++)
 1c4:	6f 5f       	subi	r22, 0xFF	; 255
 1c6:	7f 4f       	sbci	r23, 0xFF	; 255
 1c8:	64 30       	cpi	r22, 0x04	; 4
 1ca:	71 05       	cpc	r23, r1
 1cc:	0c f4       	brge	.+2      	; 0x1d0 <Keypad_getkey+0x13c>
 1ce:	68 cf       	rjmp	.-304    	; 0xa0 <Keypad_getkey+0xc>
				}
			}
		}
		KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
	}
	return 'A';
 1d0:	81 e4       	ldi	r24, 0x41	; 65
 1d2:	08 95       	ret
			{
				while(!(KEYPAD_PIN & (1 << Keypad_Row[j])));
				switch(i)
				{
					case 0:
						if(j==0) return '7';
 1d4:	87 e3       	ldi	r24, 0x37	; 55
 1d6:	08 95       	ret
						else if(j==1) return '4';
 1d8:	84 e3       	ldi	r24, 0x34	; 52
 1da:	08 95       	ret
						else if(j==2) return '1';
 1dc:	81 e3       	ldi	r24, 0x31	; 49
 1de:	08 95       	ret
						else if(j==3) return '?';
 1e0:	8f e3       	ldi	r24, 0x3F	; 63
 1e2:	08 95       	ret
					break;
					case 1:
						if(j==0) return '8';
 1e4:	88 e3       	ldi	r24, 0x38	; 56
 1e6:	08 95       	ret
						else if(j==1) return '5';
 1e8:	85 e3       	ldi	r24, 0x35	; 53
 1ea:	08 95       	ret
						else if(j==2) return '2';
 1ec:	82 e3       	ldi	r24, 0x32	; 50
 1ee:	08 95       	ret
						else if(j==3) return '0';
 1f0:	80 e3       	ldi	r24, 0x30	; 48
 1f2:	08 95       	ret
					break;
					case 2:
					if(j==0) return '9';
 1f4:	89 e3       	ldi	r24, 0x39	; 57
 1f6:	08 95       	ret
					else if(j==1) return '6';
 1f8:	86 e3       	ldi	r24, 0x36	; 54
 1fa:	08 95       	ret
					else if(j==2) return '3';
 1fc:	83 e3       	ldi	r24, 0x33	; 51
 1fe:	08 95       	ret
					else if(j==3) return '=';
 200:	8d e3       	ldi	r24, 0x3D	; 61
 202:	08 95       	ret
					break;
					case 3:
					if(j==0) return '/';
 204:	8f e2       	ldi	r24, 0x2F	; 47
 206:	08 95       	ret
					else if(j==1) return '*';
 208:	8a e2       	ldi	r24, 0x2A	; 42
 20a:	08 95       	ret
					else if(j==2) return '-';
 20c:	8d e2       	ldi	r24, 0x2D	; 45
 20e:	08 95       	ret
					else if(j==3) return '+';
 210:	8b e2       	ldi	r24, 0x2B	; 43
			}
		}
		KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
	}
	return 'A';
 212:	08 95       	ret

00000214 <LCD_kick>:
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
}

void LCD_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
 214:	88 b3       	in	r24, 0x18	; 24
 216:	84 60       	ori	r24, 0x04	; 4
 218:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f ec       	ldi	r24, 0xCF	; 207
 21c:	97 e0       	ldi	r25, 0x07	; 7
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <LCD_kick+0xa>
 222:	00 c0       	rjmp	.+0      	; 0x224 <LCD_kick+0x10>
 224:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL &= ~(1 << EN_SWITCH);
 226:	88 b3       	in	r24, 0x18	; 24
 228:	8b 7f       	andi	r24, 0xFB	; 251
 22a:	88 bb       	out	0x18, r24	; 24
 22c:	08 95       	ret

0000022e <LCD_isbusy>:
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_isbusy()
{
	LCD_DATA_DATADir &= ~(0xFF<<DATA_SHIFT);
 22e:	8a b3       	in	r24, 0x1a	; 26
 230:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= 1<<RW_SWITCH ;
 232:	88 b3       	in	r24, 0x18	; 24
 234:	82 60       	ori	r24, 0x02	; 2
 236:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_SWITCH);
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	8e 7f       	andi	r24, 0xFE	; 254
 23c:	88 bb       	out	0x18, r24	; 24
	LCD_kick();
 23e:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_kick>
	LCD_DATA_DATADir |= (0xFF<<DATA_SHIFT);
 242:	8a b3       	in	r24, 0x1a	; 26
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
 248:	88 b3       	in	r24, 0x18	; 24
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	88 bb       	out	0x18, r24	; 24
 24e:	08 95       	ret

00000250 <LCD_WRITE_COMMAND>:
}

void LCD_WRITE_COMMAND(unsigned char command)
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	LCD_isbusy();
 254:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_DATA = command ;
 258:	cb bb       	out	0x1b, r28	; 27
		LCD_kick();
 25a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_kick>
		LCD_DATA =  (LCD_DATA & 0x0F) | (command << 4) ;
		LCD_kick();
	#endif

	
}
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <LCD_clear_screen>:
 */ 
#include "LCD.h"

void LCD_clear_screen(void)
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_COMMAND>
 268:	08 95       	ret

0000026a <LCD_init>:
 26a:	8f e3       	ldi	r24, 0x3F	; 63
 26c:	9c e9       	ldi	r25, 0x9C	; 156
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <LCD_init+0x4>
 272:	00 c0       	rjmp	.+0      	; 0x274 <LCD_init+0xa>
 274:	00 00       	nop
}

void LCD_init()
{
	_delay_ms(20);
	LCD_CTRL_DATADir |=(1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH) ;
 276:	87 b3       	in	r24, 0x17	; 23
 278:	87 60       	ori	r24, 0x07	; 7
 27a:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &=~((1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH)) ;
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	88 7f       	andi	r24, 0xF8	; 248
 280:	88 bb       	out	0x18, r24	; 24
	LCD_DATA_DATADir = 0xFF ;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	8a bb       	out	0x1a, r24	; 26
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_COMMAND>
 28c:	8f e1       	ldi	r24, 0x1F	; 31
 28e:	9e e4       	ldi	r25, 0x4E	; 78
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCD_init+0x26>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCD_init+0x2c>
 296:	00 00       	nop
	_delay_ms(10);
	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 298:	88 e3       	ldi	r24, 0x38	; 56
 29a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_COMMAND>
	#endif
	
	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 29e:	86 e0       	ldi	r24, 0x06	; 6
 2a0:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 2aa:	8f e0       	ldi	r24, 0x0F	; 15
 2ac:	0e 94 28 01 	call	0x250	; 0x250 <LCD_WRITE_COMMAND>
 2b0:	08 95       	ret

000002b2 <LCD_WRITE_CHAR>:

	
}

void LCD_WRITE_CHAR(unsigned char character)
{
 2b2:	cf 93       	push	r28
 2b4:	c8 2f       	mov	r28, r24
	LCD_isbusy();
 2b6:	0e 94 17 01 	call	0x22e	; 0x22e <LCD_isbusy>
	#ifdef EIGHT_BIT_MODE
		LCD_CTRL |= 1<<RS_SWITCH ;
 2ba:	88 b3       	in	r24, 0x18	; 24
 2bc:	81 60       	ori	r24, 0x01	; 1
 2be:	88 bb       	out	0x18, r24	; 24
		LCD_DATA = character ;
 2c0:	cb bb       	out	0x1b, r28	; 27
		LCD_kick();
 2c2:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_kick>
	LCD_DATA =  (LCD_DATA & 0x0F) | (character & 0xF0) ;
	LCD_kick();
	LCD_DATA =  (LCD_DATA & 0x0F) | (character << 4) ;
	LCD_kick();
	#endif
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <main>:
#include "KEYPAD_Driver/KEYPAD.h"

int main(void)
{
	unsigned char pressed;
	LCD_init();
 2ca:	0e 94 35 01 	call	0x26a	; 0x26a <LCD_init>
	Keypad_init();
 2ce:	0e 94 41 00 	call	0x82	; 0x82 <Keypad_init>
 2d2:	2f e7       	ldi	r18, 0x7F	; 127
 2d4:	88 e3       	ldi	r24, 0x38	; 56
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	21 50       	subi	r18, 0x01	; 1
 2da:	80 40       	sbci	r24, 0x00	; 0
 2dc:	90 40       	sbci	r25, 0x00	; 0
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <main+0xe>
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <main+0x18>
 2e2:	00 00       	nop
	_delay_ms(50);
    while (1) 
    {
		pressed=Keypad_getkey();
 2e4:	0e 94 4a 00 	call	0x94	; 0x94 <Keypad_getkey>
		switch(pressed)
 2e8:	8f 33       	cpi	r24, 0x3F	; 63
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <main+0x28>
 2ec:	81 34       	cpi	r24, 0x41	; 65
 2ee:	31 f0       	breq	.+12     	; 0x2fc <main+0x32>
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <main+0x2e>
		{
			case 'A':
			break;
			case '?':
				LCD_clear_screen();
 2f2:	0e 94 31 01 	call	0x262	; 0x262 <LCD_clear_screen>
			break;
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <main+0x32>
			default:
			LCD_WRITE_CHAR(pressed);
 2f8:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_WRITE_CHAR>
 2fc:	2f e7       	ldi	r18, 0x7F	; 127
 2fe:	88 e3       	ldi	r24, 0x38	; 56
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <main+0x38>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <main+0x42>
 30c:	00 00       	nop
 30e:	ea cf       	rjmp	.-44     	; 0x2e4 <main+0x1a>

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
