
LCD_KEYBAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b4c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08000c7c  08000c7c  00010c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cb0  08000cb0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000cb0  08000cb0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cb0  08000cb0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cb0  08000cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cb4  08000cb4  00010cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000020  08000cd8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000cd8  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003007  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007c1  00000000  00000000  00023050  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000006c4  00000000  00000000  00023811  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000140  00000000  00000000  00023ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000f8  00000000  00000000  00024018  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001fb3  00000000  00000000  00024110  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001aa6  00000000  00000000  000260c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00007b87  00000000  00000000  00027b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002f6f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000003a0  00000000  00000000  0002f76c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c64 	.word	0x08000c64

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000c64 	.word	0x08000c64

08000170 <main>:
void clock_init() ;
void GPIO_init();


int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	clock_init();
 8000176:	f000 f869 	bl	800024c <clock_init>
	GPIO_init();
 800017a:	f000 f87b 	bl	8000274 <GPIO_init>
	LCD_init();
 800017e:	f000 fae5 	bl	800074c <LCD_init>
	unsigned char pressed;
	LCD_WRITE_STRING("Hey there");
 8000182:	482d      	ldr	r0, [pc, #180]	; (8000238 <main+0xc8>)
 8000184:	f000 fc02 	bl	800098c <LCD_WRITE_STRING>
	wait_ms(500);
 8000188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800018c:	f000 f9f8 	bl	8000580 <wait_ms>
	LCD_clear_screen();
 8000190:	f000 fa12 	bl	80005b8 <LCD_clear_screen>
	uint8_t seg[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
 8000194:	4a29      	ldr	r2, [pc, #164]	; (800023c <main+0xcc>)
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	ca07      	ldmia	r2, {r0, r1, r2}
 800019c:	c303      	stmia	r3!, {r0, r1}
 800019e:	801a      	strh	r2, [r3, #0]
	uint8_t lcd[]={'0','1','2','3','4','5','6','7','8','9'};
 80001a0:	4a27      	ldr	r2, [pc, #156]	; (8000240 <main+0xd0>)
 80001a2:	463b      	mov	r3, r7
 80001a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80001a6:	c303      	stmia	r3!, {r0, r1}
 80001a8:	801a      	strh	r2, [r3, #0]

	for(uint8_t i=0;i<10;i++)
 80001aa:	2300      	movs	r3, #0
 80001ac:	75fb      	strb	r3, [r7, #23]
 80001ae:	e01b      	b.n	80001e8 <main+0x78>
	{
		GPIO_WritePort(GPIOB,seg[i]<<9);
 80001b0:	7dfb      	ldrb	r3, [r7, #23]
 80001b2:	f107 0218 	add.w	r2, r7, #24
 80001b6:	4413      	add	r3, r2
 80001b8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80001bc:	b29b      	uxth	r3, r3
 80001be:	025b      	lsls	r3, r3, #9
 80001c0:	b29b      	uxth	r3, r3
 80001c2:	4619      	mov	r1, r3
 80001c4:	481f      	ldr	r0, [pc, #124]	; (8000244 <main+0xd4>)
 80001c6:	f000 fd1a 	bl	8000bfe <GPIO_WritePort>
		LCD_WRITE_CHAR(lcd[i]);
 80001ca:	7dfb      	ldrb	r3, [r7, #23]
 80001cc:	f107 0218 	add.w	r2, r7, #24
 80001d0:	4413      	add	r3, r2
 80001d2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80001d6:	4618      	mov	r0, r3
 80001d8:	f000 fb46 	bl	8000868 <LCD_WRITE_CHAR>
		wait_ms(200);
 80001dc:	20c8      	movs	r0, #200	; 0xc8
 80001de:	f000 f9cf 	bl	8000580 <wait_ms>
	for(uint8_t i=0;i<10;i++)
 80001e2:	7dfb      	ldrb	r3, [r7, #23]
 80001e4:	3301      	adds	r3, #1
 80001e6:	75fb      	strb	r3, [r7, #23]
 80001e8:	7dfb      	ldrb	r3, [r7, #23]
 80001ea:	2b09      	cmp	r3, #9
 80001ec:	d9e0      	bls.n	80001b0 <main+0x40>
	}
	LCD_clear_screen();
 80001ee:	f000 f9e3 	bl	80005b8 <LCD_clear_screen>
	Keypad_init();
 80001f2:	f000 f8af 	bl	8000354 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 80001f6:	4814      	ldr	r0, [pc, #80]	; (8000248 <main+0xd8>)
 80001f8:	f000 fbc8 	bl	800098c <LCD_WRITE_STRING>
	wait_ms(500);
 80001fc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000200:	f000 f9be 	bl	8000580 <wait_ms>
	LCD_clear_screen();
 8000204:	f000 f9d8 	bl	80005b8 <LCD_clear_screen>
    while (1)
    {
		pressed=Keypad_getkey();
 8000208:	f000 f8f0 	bl	80003ec <Keypad_getkey>
 800020c:	4603      	mov	r3, r0
 800020e:	75bb      	strb	r3, [r7, #22]
		switch(pressed)
 8000210:	7dbb      	ldrb	r3, [r7, #22]
 8000212:	2b3f      	cmp	r3, #63	; 0x3f
 8000214:	d002      	beq.n	800021c <main+0xac>
 8000216:	2b41      	cmp	r3, #65	; 0x41
 8000218:	d008      	beq.n	800022c <main+0xbc>
 800021a:	e002      	b.n	8000222 <main+0xb2>
		{
			case 'A':
			break;
			case '?':
				LCD_clear_screen();
 800021c:	f000 f9cc 	bl	80005b8 <LCD_clear_screen>
			break;
 8000220:	e005      	b.n	800022e <main+0xbe>
			default:
			LCD_WRITE_CHAR(pressed);
 8000222:	7dbb      	ldrb	r3, [r7, #22]
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fb1f 	bl	8000868 <LCD_WRITE_CHAR>
			break;
 800022a:	e000      	b.n	800022e <main+0xbe>
			break;
 800022c:	bf00      	nop
		}
		wait_ms(10);
 800022e:	200a      	movs	r0, #10
 8000230:	f000 f9a6 	bl	8000580 <wait_ms>
		pressed=Keypad_getkey();
 8000234:	e7e8      	b.n	8000208 <main+0x98>
 8000236:	bf00      	nop
 8000238:	08000c7c 	.word	0x08000c7c
 800023c:	08000c98 	.word	0x08000c98
 8000240:	08000ca4 	.word	0x08000ca4
 8000244:	40010c00 	.word	0x40010c00
 8000248:	08000c88 	.word	0x08000c88

0800024c <clock_init>:
    }
}

void clock_init()
{
 800024c:	b480      	push	{r7}
 800024e:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <clock_init+0x24>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a06      	ldr	r2, [pc, #24]	; (8000270 <clock_init+0x24>)
 8000256:	f043 0304 	orr.w	r3, r3, #4
 800025a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 800025c:	4b04      	ldr	r3, [pc, #16]	; (8000270 <clock_init+0x24>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	4a03      	ldr	r2, [pc, #12]	; (8000270 <clock_init+0x24>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6193      	str	r3, [r2, #24]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr
 8000270:	40021000 	.word	0x40021000

08000274 <GPIO_init>:

void GPIO_init()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0
	GPIO_PIN_Config PINConf ;
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800027a:	2304      	movs	r3, #4
 800027c:	807b      	strh	r3, [r7, #2]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800027e:	2301      	movs	r3, #1
 8000280:	80bb      	strh	r3, [r7, #4]
	PINConf.pin_number = GPIO_PIN_9 ;
 8000282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000286:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 8000288:	463b      	mov	r3, r7
 800028a:	4619      	mov	r1, r3
 800028c:	481b      	ldr	r0, [pc, #108]	; (80002fc <GPIO_init+0x88>)
 800028e:	f000 fc0c 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = GPIO_PIN_10 ;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 8000298:	463b      	mov	r3, r7
 800029a:	4619      	mov	r1, r3
 800029c:	4817      	ldr	r0, [pc, #92]	; (80002fc <GPIO_init+0x88>)
 800029e:	f000 fc04 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = GPIO_PIN_11 ;
 80002a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80002a6:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 80002a8:	463b      	mov	r3, r7
 80002aa:	4619      	mov	r1, r3
 80002ac:	4813      	ldr	r0, [pc, #76]	; (80002fc <GPIO_init+0x88>)
 80002ae:	f000 fbfc 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = GPIO_PIN_12 ;
 80002b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002b6:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 80002b8:	463b      	mov	r3, r7
 80002ba:	4619      	mov	r1, r3
 80002bc:	480f      	ldr	r0, [pc, #60]	; (80002fc <GPIO_init+0x88>)
 80002be:	f000 fbf4 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = GPIO_PIN_13 ;
 80002c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002c6:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 80002c8:	463b      	mov	r3, r7
 80002ca:	4619      	mov	r1, r3
 80002cc:	480b      	ldr	r0, [pc, #44]	; (80002fc <GPIO_init+0x88>)
 80002ce:	f000 fbec 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = GPIO_PIN_14 ;
 80002d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002d6:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 80002d8:	463b      	mov	r3, r7
 80002da:	4619      	mov	r1, r3
 80002dc:	4807      	ldr	r0, [pc, #28]	; (80002fc <GPIO_init+0x88>)
 80002de:	f000 fbe4 	bl	8000aaa <GPIO_Init>
	PINConf.pin_number = GPIO_PIN_15 ;
 80002e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002e6:	803b      	strh	r3, [r7, #0]
	GPIO_Init(GPIOB, &PINConf) ;
 80002e8:	463b      	mov	r3, r7
 80002ea:	4619      	mov	r1, r3
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <GPIO_init+0x88>)
 80002ee:	f000 fbdc 	bl	8000aaa <GPIO_Init>

}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 fc75 	bl	8000c1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ff1d 	bl	8000170 <main>

08000336 <LoopForever>:

LoopForever:
    b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000344:	08000cb8 	.word	0x08000cb8
  ldr r2, =_sbss
 8000348:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 800034c:	20000044 	.word	0x20000044

08000350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC1_2_IRQHandler>
	...

08000354 <Keypad_init>:

int Keypad_Row[] = {R0, R1, R2, R3};
int Keypad_Col[] = {C0, C1, C2, C3};

void Keypad_init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000358:	4b22      	ldr	r3, [pc, #136]	; (80003e4 <Keypad_init+0x90>)
 800035a:	2204      	movs	r2, #4
 800035c:	805a      	strh	r2, [r3, #2]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800035e:	4b21      	ldr	r3, [pc, #132]	; (80003e4 <Keypad_init+0x90>)
 8000360:	2201      	movs	r2, #1
 8000362:	809a      	strh	r2, [r3, #4]
	PINConf.pin_number = R0 ;
 8000364:	4b1f      	ldr	r3, [pc, #124]	; (80003e4 <Keypad_init+0x90>)
 8000366:	2201      	movs	r2, #1
 8000368:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 800036a:	491e      	ldr	r1, [pc, #120]	; (80003e4 <Keypad_init+0x90>)
 800036c:	481e      	ldr	r0, [pc, #120]	; (80003e8 <Keypad_init+0x94>)
 800036e:	f000 fb9c 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = R1 ;
 8000372:	4b1c      	ldr	r3, [pc, #112]	; (80003e4 <Keypad_init+0x90>)
 8000374:	2202      	movs	r2, #2
 8000376:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 8000378:	491a      	ldr	r1, [pc, #104]	; (80003e4 <Keypad_init+0x90>)
 800037a:	481b      	ldr	r0, [pc, #108]	; (80003e8 <Keypad_init+0x94>)
 800037c:	f000 fb95 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = R2 ;
 8000380:	4b18      	ldr	r3, [pc, #96]	; (80003e4 <Keypad_init+0x90>)
 8000382:	2208      	movs	r2, #8
 8000384:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 8000386:	4917      	ldr	r1, [pc, #92]	; (80003e4 <Keypad_init+0x90>)
 8000388:	4817      	ldr	r0, [pc, #92]	; (80003e8 <Keypad_init+0x94>)
 800038a:	f000 fb8e 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = R3 ;
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <Keypad_init+0x90>)
 8000390:	2210      	movs	r2, #16
 8000392:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 8000394:	4913      	ldr	r1, [pc, #76]	; (80003e4 <Keypad_init+0x90>)
 8000396:	4814      	ldr	r0, [pc, #80]	; (80003e8 <Keypad_init+0x94>)
 8000398:	f000 fb87 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = C0 ;
 800039c:	4b11      	ldr	r3, [pc, #68]	; (80003e4 <Keypad_init+0x90>)
 800039e:	2220      	movs	r2, #32
 80003a0:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 80003a2:	4910      	ldr	r1, [pc, #64]	; (80003e4 <Keypad_init+0x90>)
 80003a4:	4810      	ldr	r0, [pc, #64]	; (80003e8 <Keypad_init+0x94>)
 80003a6:	f000 fb80 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = C1 ;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <Keypad_init+0x90>)
 80003ac:	2240      	movs	r2, #64	; 0x40
 80003ae:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 80003b0:	490c      	ldr	r1, [pc, #48]	; (80003e4 <Keypad_init+0x90>)
 80003b2:	480d      	ldr	r0, [pc, #52]	; (80003e8 <Keypad_init+0x94>)
 80003b4:	f000 fb79 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = C2 ;
 80003b8:	4b0a      	ldr	r3, [pc, #40]	; (80003e4 <Keypad_init+0x90>)
 80003ba:	2280      	movs	r2, #128	; 0x80
 80003bc:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 80003be:	4909      	ldr	r1, [pc, #36]	; (80003e4 <Keypad_init+0x90>)
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <Keypad_init+0x94>)
 80003c2:	f000 fb72 	bl	8000aaa <GPIO_Init>

	PINConf.pin_number = C3 ;
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <Keypad_init+0x90>)
 80003c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003cc:	801a      	strh	r2, [r3, #0]
	GPIO_Init(KEYPAD_PORT, &PINConf) ;
 80003ce:	4905      	ldr	r1, [pc, #20]	; (80003e4 <Keypad_init+0x90>)
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <Keypad_init+0x94>)
 80003d2:	f000 fb6a 	bl	8000aaa <GPIO_Init>


	GPIO_WritePort(KEYPAD_PORT, 0xFF) ;
 80003d6:	21ff      	movs	r1, #255	; 0xff
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <Keypad_init+0x94>)
 80003da:	f000 fc10 	bl	8000bfe <GPIO_WritePort>
}
 80003de:	bf00      	nop
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	2000003c 	.word	0x2000003c
 80003e8:	40010c00 	.word	0x40010c00

080003ec <Keypad_getkey>:

char Keypad_getkey(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
	int i,j;
	//KEYPAD_PORT |=(1<<C0) | (1<<C1) | (1<<C2) | (1<<C3);
	GPIO_WritePin(KEYPAD_PORT, C0,GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	2120      	movs	r1, #32
 80003f6:	485f      	ldr	r0, [pc, #380]	; (8000574 <Keypad_getkey+0x188>)
 80003f8:	f000 fbea 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_PORT, C1,GPIO_PIN_SET);
 80003fc:	2201      	movs	r2, #1
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	485c      	ldr	r0, [pc, #368]	; (8000574 <Keypad_getkey+0x188>)
 8000402:	f000 fbe5 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_PORT, C2,GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	485a      	ldr	r0, [pc, #360]	; (8000574 <Keypad_getkey+0x188>)
 800040c:	f000 fbe0 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(KEYPAD_PORT, C3,GPIO_PIN_SET);
 8000410:	2201      	movs	r2, #1
 8000412:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000416:	4857      	ldr	r0, [pc, #348]	; (8000574 <Keypad_getkey+0x188>)
 8000418:	f000 fbda 	bl	8000bd0 <GPIO_WritePin>
	for(i=0;i<4;i++)
 800041c:	2300      	movs	r3, #0
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	e09f      	b.n	8000562 <Keypad_getkey+0x176>
	{
		//KEYPAD_PORT &= ~(1<<Keypad_Col[i]);
		GPIO_WritePin(KEYPAD_PORT, Keypad_Col[i],GPIO_PIN_RESET);
 8000422:	4a55      	ldr	r2, [pc, #340]	; (8000578 <Keypad_getkey+0x18c>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800042a:	b29b      	uxth	r3, r3
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	4850      	ldr	r0, [pc, #320]	; (8000574 <Keypad_getkey+0x188>)
 8000432:	f000 fbcd 	bl	8000bd0 <GPIO_WritePin>
		for (j=0;j<4;j++)
 8000436:	2300      	movs	r3, #0
 8000438:	603b      	str	r3, [r7, #0]
 800043a:	e081      	b.n	8000540 <Keypad_getkey+0x154>
		{
			if (GPIO_ReadPin(KEYPAD_PORT, Keypad_Row[j]) == 0)
 800043c:	4a4f      	ldr	r2, [pc, #316]	; (800057c <Keypad_getkey+0x190>)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000444:	b29b      	uxth	r3, r3
 8000446:	4619      	mov	r1, r3
 8000448:	484a      	ldr	r0, [pc, #296]	; (8000574 <Keypad_getkey+0x188>)
 800044a:	f000 fbaa 	bl	8000ba2 <GPIO_ReadPin>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d172      	bne.n	800053a <Keypad_getkey+0x14e>
			{
				while(GPIO_ReadPin(KEYPAD_PORT, Keypad_Row[j]) == 0);
 8000454:	bf00      	nop
 8000456:	4a49      	ldr	r2, [pc, #292]	; (800057c <Keypad_getkey+0x190>)
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800045e:	b29b      	uxth	r3, r3
 8000460:	4619      	mov	r1, r3
 8000462:	4844      	ldr	r0, [pc, #272]	; (8000574 <Keypad_getkey+0x188>)
 8000464:	f000 fb9d 	bl	8000ba2 <GPIO_ReadPin>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f3      	beq.n	8000456 <Keypad_getkey+0x6a>
				switch(i)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d862      	bhi.n	800053a <Keypad_getkey+0x14e>
 8000474:	a201      	add	r2, pc, #4	; (adr r2, 800047c <Keypad_getkey+0x90>)
 8000476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047a:	bf00      	nop
 800047c:	0800048d 	.word	0x0800048d
 8000480:	080004b5 	.word	0x080004b5
 8000484:	080004dd 	.word	0x080004dd
 8000488:	08000505 	.word	0x08000505
				{
				case 0:
					if(j==0) return '7';
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d101      	bne.n	8000496 <Keypad_getkey+0xaa>
 8000492:	2337      	movs	r3, #55	; 0x37
 8000494:	e06a      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==1) return '4';
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	2b01      	cmp	r3, #1
 800049a:	d101      	bne.n	80004a0 <Keypad_getkey+0xb4>
 800049c:	2334      	movs	r3, #52	; 0x34
 800049e:	e065      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==2) return '1';
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	2b02      	cmp	r3, #2
 80004a4:	d101      	bne.n	80004aa <Keypad_getkey+0xbe>
 80004a6:	2331      	movs	r3, #49	; 0x31
 80004a8:	e060      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==3) return '?';
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d13d      	bne.n	800052c <Keypad_getkey+0x140>
 80004b0:	233f      	movs	r3, #63	; 0x3f
 80004b2:	e05b      	b.n	800056c <Keypad_getkey+0x180>
					break;
				case 1:
					if(j==0) return '8';
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d101      	bne.n	80004be <Keypad_getkey+0xd2>
 80004ba:	2338      	movs	r3, #56	; 0x38
 80004bc:	e056      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==1) return '5';
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	2b01      	cmp	r3, #1
 80004c2:	d101      	bne.n	80004c8 <Keypad_getkey+0xdc>
 80004c4:	2335      	movs	r3, #53	; 0x35
 80004c6:	e051      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==2) return '2';
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d101      	bne.n	80004d2 <Keypad_getkey+0xe6>
 80004ce:	2332      	movs	r3, #50	; 0x32
 80004d0:	e04c      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==3) return '0';
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d12b      	bne.n	8000530 <Keypad_getkey+0x144>
 80004d8:	2330      	movs	r3, #48	; 0x30
 80004da:	e047      	b.n	800056c <Keypad_getkey+0x180>
					break;
				case 2:
					if(j==0) return '9';
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d101      	bne.n	80004e6 <Keypad_getkey+0xfa>
 80004e2:	2339      	movs	r3, #57	; 0x39
 80004e4:	e042      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==1) return '6';
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d101      	bne.n	80004f0 <Keypad_getkey+0x104>
 80004ec:	2336      	movs	r3, #54	; 0x36
 80004ee:	e03d      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==2) return '3';
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	2b02      	cmp	r3, #2
 80004f4:	d101      	bne.n	80004fa <Keypad_getkey+0x10e>
 80004f6:	2333      	movs	r3, #51	; 0x33
 80004f8:	e038      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==3) return '=';
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	d119      	bne.n	8000534 <Keypad_getkey+0x148>
 8000500:	233d      	movs	r3, #61	; 0x3d
 8000502:	e033      	b.n	800056c <Keypad_getkey+0x180>
					break;
				case 3:
					if(j==0) return '/';
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d101      	bne.n	800050e <Keypad_getkey+0x122>
 800050a:	232f      	movs	r3, #47	; 0x2f
 800050c:	e02e      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==1) return '*';
 800050e:	683b      	ldr	r3, [r7, #0]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d101      	bne.n	8000518 <Keypad_getkey+0x12c>
 8000514:	232a      	movs	r3, #42	; 0x2a
 8000516:	e029      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==2) return '-';
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	2b02      	cmp	r3, #2
 800051c:	d101      	bne.n	8000522 <Keypad_getkey+0x136>
 800051e:	232d      	movs	r3, #45	; 0x2d
 8000520:	e024      	b.n	800056c <Keypad_getkey+0x180>
					else if(j==3) return '+';
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b03      	cmp	r3, #3
 8000526:	d107      	bne.n	8000538 <Keypad_getkey+0x14c>
 8000528:	232b      	movs	r3, #43	; 0x2b
 800052a:	e01f      	b.n	800056c <Keypad_getkey+0x180>
					break;
 800052c:	bf00      	nop
 800052e:	e004      	b.n	800053a <Keypad_getkey+0x14e>
					break;
 8000530:	bf00      	nop
 8000532:	e002      	b.n	800053a <Keypad_getkey+0x14e>
					break;
 8000534:	bf00      	nop
 8000536:	e000      	b.n	800053a <Keypad_getkey+0x14e>
					break;
 8000538:	bf00      	nop
		for (j=0;j<4;j++)
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	3301      	adds	r3, #1
 800053e:	603b      	str	r3, [r7, #0]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	2b03      	cmp	r3, #3
 8000544:	f77f af7a 	ble.w	800043c <Keypad_getkey+0x50>
				}
			}
		}
		GPIO_WritePin(KEYPAD_PORT, Keypad_Col[i],GPIO_PIN_SET);
 8000548:	4a0b      	ldr	r2, [pc, #44]	; (8000578 <Keypad_getkey+0x18c>)
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000550:	b29b      	uxth	r3, r3
 8000552:	2201      	movs	r2, #1
 8000554:	4619      	mov	r1, r3
 8000556:	4807      	ldr	r0, [pc, #28]	; (8000574 <Keypad_getkey+0x188>)
 8000558:	f000 fb3a 	bl	8000bd0 <GPIO_WritePin>
	for(i=0;i<4;i++)
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3301      	adds	r3, #1
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	2b03      	cmp	r3, #3
 8000566:	f77f af5c 	ble.w	8000422 <Keypad_getkey+0x36>
	}
	return 'A';
 800056a:	2341      	movs	r3, #65	; 0x41
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40010c00 	.word	0x40010c00
 8000578:	20000010 	.word	0x20000010
 800057c:	20000000 	.word	0x20000000

08000580 <wait_ms>:
 *      Author: Ziad Mahmoud Saad
 */

#include "LCD.h"
#define READ_BIT(reg, bitNum)           ((reg >> bitNum)& 1U)
void wait_ms(uint32_t time) {
 8000580:	b480      	push	{r7}
 8000582:	b085      	sub	sp, #20
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	e00b      	b.n	80005a6 <wait_ms+0x26>
		for (j = 0; j < 255; j++);
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	e002      	b.n	800059a <wait_ms+0x1a>
 8000594:	68bb      	ldr	r3, [r7, #8]
 8000596:	3301      	adds	r3, #1
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	2bfe      	cmp	r3, #254	; 0xfe
 800059e:	d9f9      	bls.n	8000594 <wait_ms+0x14>
	for (i = 0; i < time; i++)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d3ef      	bcc.n	800058e <wait_ms+0xe>
}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <LCD_clear_screen>:

void LCD_clear_screen(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 f8e3 	bl	8000788 <LCD_WRITE_COMMAND>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <LCD_kick>:

void LCD_kick()
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET) ;
 80005cc:	2201      	movs	r2, #1
 80005ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d2:	4807      	ldr	r0, [pc, #28]	; (80005f0 <LCD_kick+0x28>)
 80005d4:	f000 fafc 	bl	8000bd0 <GPIO_WritePin>
	wait_ms(5);
 80005d8:	2005      	movs	r0, #5
 80005da:	f7ff ffd1 	bl	8000580 <wait_ms>
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
 80005de:	2200      	movs	r2, #0
 80005e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e4:	4802      	ldr	r0, [pc, #8]	; (80005f0 <LCD_kick+0x28>)
 80005e6:	f000 faf3 	bl	8000bd0 <GPIO_WritePin>

}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010800 	.word	0x40010800

080005f4 <LCD_GPIO_init>:


void LCD_GPIO_init()
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	//EN_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80005f8:	4b52      	ldr	r3, [pc, #328]	; (8000744 <LCD_GPIO_init+0x150>)
 80005fa:	2204      	movs	r2, #4
 80005fc:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = EN_SWITCH ;
 80005fe:	4b51      	ldr	r3, [pc, #324]	; (8000744 <LCD_GPIO_init+0x150>)
 8000600:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000604:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000606:	4b4f      	ldr	r3, [pc, #316]	; (8000744 <LCD_GPIO_init+0x150>)
 8000608:	2201      	movs	r2, #1
 800060a:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_CTRL, &PINConf) ;
 800060c:	494d      	ldr	r1, [pc, #308]	; (8000744 <LCD_GPIO_init+0x150>)
 800060e:	484e      	ldr	r0, [pc, #312]	; (8000748 <LCD_GPIO_init+0x154>)
 8000610:	f000 fa4b 	bl	8000aaa <GPIO_Init>
	//RW_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000614:	4b4b      	ldr	r3, [pc, #300]	; (8000744 <LCD_GPIO_init+0x150>)
 8000616:	2204      	movs	r2, #4
 8000618:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = RW_SWITCH ;
 800061a:	4b4a      	ldr	r3, [pc, #296]	; (8000744 <LCD_GPIO_init+0x150>)
 800061c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000620:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000622:	4b48      	ldr	r3, [pc, #288]	; (8000744 <LCD_GPIO_init+0x150>)
 8000624:	2201      	movs	r2, #1
 8000626:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_CTRL, &PINConf) ;
 8000628:	4946      	ldr	r1, [pc, #280]	; (8000744 <LCD_GPIO_init+0x150>)
 800062a:	4847      	ldr	r0, [pc, #284]	; (8000748 <LCD_GPIO_init+0x154>)
 800062c:	f000 fa3d 	bl	8000aaa <GPIO_Init>
	//RS_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000630:	4b44      	ldr	r3, [pc, #272]	; (8000744 <LCD_GPIO_init+0x150>)
 8000632:	2204      	movs	r2, #4
 8000634:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = RS_SWITCH ;
 8000636:	4b43      	ldr	r3, [pc, #268]	; (8000744 <LCD_GPIO_init+0x150>)
 8000638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800063c:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800063e:	4b41      	ldr	r3, [pc, #260]	; (8000744 <LCD_GPIO_init+0x150>)
 8000640:	2201      	movs	r2, #1
 8000642:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_CTRL, &PINConf) ;
 8000644:	493f      	ldr	r1, [pc, #252]	; (8000744 <LCD_GPIO_init+0x150>)
 8000646:	4840      	ldr	r0, [pc, #256]	; (8000748 <LCD_GPIO_init+0x154>)
 8000648:	f000 fa2f 	bl	8000aaa <GPIO_Init>


	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
 800064c:	2200      	movs	r2, #0
 800064e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000652:	483d      	ldr	r0, [pc, #244]	; (8000748 <LCD_GPIO_init+0x154>)
 8000654:	f000 fabc 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
 8000658:	2200      	movs	r2, #0
 800065a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800065e:	483a      	ldr	r0, [pc, #232]	; (8000748 <LCD_GPIO_init+0x154>)
 8000660:	f000 fab6 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET) ;
 8000664:	2200      	movs	r2, #0
 8000666:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066a:	4837      	ldr	r0, [pc, #220]	; (8000748 <LCD_GPIO_init+0x154>)
 800066c:	f000 fab0 	bl	8000bd0 <GPIO_WritePin>


	//DATA_PINS are Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000670:	4b34      	ldr	r3, [pc, #208]	; (8000744 <LCD_GPIO_init+0x150>)
 8000672:	2204      	movs	r2, #4
 8000674:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_0 ;
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <LCD_GPIO_init+0x150>)
 8000678:	2201      	movs	r2, #1
 800067a:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 800067c:	4b31      	ldr	r3, [pc, #196]	; (8000744 <LCD_GPIO_init+0x150>)
 800067e:	2201      	movs	r2, #1
 8000680:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 8000682:	4930      	ldr	r1, [pc, #192]	; (8000744 <LCD_GPIO_init+0x150>)
 8000684:	4830      	ldr	r0, [pc, #192]	; (8000748 <LCD_GPIO_init+0x154>)
 8000686:	f000 fa10 	bl	8000aaa <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800068a:	4b2e      	ldr	r3, [pc, #184]	; (8000744 <LCD_GPIO_init+0x150>)
 800068c:	2204      	movs	r2, #4
 800068e:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_1 ;
 8000690:	4b2c      	ldr	r3, [pc, #176]	; (8000744 <LCD_GPIO_init+0x150>)
 8000692:	2202      	movs	r2, #2
 8000694:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000696:	4b2b      	ldr	r3, [pc, #172]	; (8000744 <LCD_GPIO_init+0x150>)
 8000698:	2201      	movs	r2, #1
 800069a:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 800069c:	4929      	ldr	r1, [pc, #164]	; (8000744 <LCD_GPIO_init+0x150>)
 800069e:	482a      	ldr	r0, [pc, #168]	; (8000748 <LCD_GPIO_init+0x154>)
 80006a0:	f000 fa03 	bl	8000aaa <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006a4:	4b27      	ldr	r3, [pc, #156]	; (8000744 <LCD_GPIO_init+0x150>)
 80006a6:	2204      	movs	r2, #4
 80006a8:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_2 ;
 80006aa:	4b26      	ldr	r3, [pc, #152]	; (8000744 <LCD_GPIO_init+0x150>)
 80006ac:	2204      	movs	r2, #4
 80006ae:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80006b0:	4b24      	ldr	r3, [pc, #144]	; (8000744 <LCD_GPIO_init+0x150>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80006b6:	4923      	ldr	r1, [pc, #140]	; (8000744 <LCD_GPIO_init+0x150>)
 80006b8:	4823      	ldr	r0, [pc, #140]	; (8000748 <LCD_GPIO_init+0x154>)
 80006ba:	f000 f9f6 	bl	8000aaa <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <LCD_GPIO_init+0x150>)
 80006c0:	2204      	movs	r2, #4
 80006c2:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_3 ;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	; (8000744 <LCD_GPIO_init+0x150>)
 80006c6:	2208      	movs	r2, #8
 80006c8:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <LCD_GPIO_init+0x150>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80006d0:	491c      	ldr	r1, [pc, #112]	; (8000744 <LCD_GPIO_init+0x150>)
 80006d2:	481d      	ldr	r0, [pc, #116]	; (8000748 <LCD_GPIO_init+0x154>)
 80006d4:	f000 f9e9 	bl	8000aaa <GPIO_Init>


	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <LCD_GPIO_init+0x150>)
 80006da:	2204      	movs	r2, #4
 80006dc:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_4 ;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <LCD_GPIO_init+0x150>)
 80006e0:	2210      	movs	r2, #16
 80006e2:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <LCD_GPIO_init+0x150>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 80006ea:	4916      	ldr	r1, [pc, #88]	; (8000744 <LCD_GPIO_init+0x150>)
 80006ec:	4816      	ldr	r0, [pc, #88]	; (8000748 <LCD_GPIO_init+0x154>)
 80006ee:	f000 f9dc 	bl	8000aaa <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <LCD_GPIO_init+0x150>)
 80006f4:	2204      	movs	r2, #4
 80006f6:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_5 ;
 80006f8:	4b12      	ldr	r3, [pc, #72]	; (8000744 <LCD_GPIO_init+0x150>)
 80006fa:	2220      	movs	r2, #32
 80006fc:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 80006fe:	4b11      	ldr	r3, [pc, #68]	; (8000744 <LCD_GPIO_init+0x150>)
 8000700:	2201      	movs	r2, #1
 8000702:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 8000704:	490f      	ldr	r1, [pc, #60]	; (8000744 <LCD_GPIO_init+0x150>)
 8000706:	4810      	ldr	r0, [pc, #64]	; (8000748 <LCD_GPIO_init+0x154>)
 8000708:	f000 f9cf 	bl	8000aaa <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <LCD_GPIO_init+0x150>)
 800070e:	2204      	movs	r2, #4
 8000710:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_6 ;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <LCD_GPIO_init+0x150>)
 8000714:	2240      	movs	r2, #64	; 0x40
 8000716:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <LCD_GPIO_init+0x150>)
 800071a:	2201      	movs	r2, #1
 800071c:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 800071e:	4909      	ldr	r1, [pc, #36]	; (8000744 <LCD_GPIO_init+0x150>)
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <LCD_GPIO_init+0x154>)
 8000722:	f000 f9c2 	bl	8000aaa <GPIO_Init>

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
 8000726:	4b07      	ldr	r3, [pc, #28]	; (8000744 <LCD_GPIO_init+0x150>)
 8000728:	2204      	movs	r2, #4
 800072a:	805a      	strh	r2, [r3, #2]
	PINConf.pin_number = GPIO_PIN_7 ;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <LCD_GPIO_init+0x150>)
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	801a      	strh	r2, [r3, #0]
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
 8000732:	4b04      	ldr	r3, [pc, #16]	; (8000744 <LCD_GPIO_init+0x150>)
 8000734:	2201      	movs	r2, #1
 8000736:	809a      	strh	r2, [r3, #4]
	GPIO_Init(LCD_PORT, &PINConf) ;
 8000738:	4902      	ldr	r1, [pc, #8]	; (8000744 <LCD_GPIO_init+0x150>)
 800073a:	4803      	ldr	r0, [pc, #12]	; (8000748 <LCD_GPIO_init+0x154>)
 800073c:	f000 f9b5 	bl	8000aaa <GPIO_Init>
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	2000003c 	.word	0x2000003c
 8000748:	40010800 	.word	0x40010800

0800074c <LCD_init>:

void LCD_init()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	wait_ms(20);
 8000750:	2014      	movs	r0, #20
 8000752:	f7ff ff15 	bl	8000580 <wait_ms>

	LCD_GPIO_init();
 8000756:	f7ff ff4d 	bl	80005f4 <LCD_GPIO_init>
	wait_ms(20);
 800075a:	2014      	movs	r0, #20
 800075c:	f7ff ff10 	bl	8000580 <wait_ms>
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000760:	2001      	movs	r0, #1
 8000762:	f000 f811 	bl	8000788 <LCD_WRITE_COMMAND>

	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 8000766:	2038      	movs	r0, #56	; 0x38
 8000768:	f000 f80e 	bl	8000788 <LCD_WRITE_COMMAND>
	wait_ms(5);
 800076c:	2005      	movs	r0, #5
 800076e:	f7ff ff07 	bl	8000580 <wait_ms>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000772:	2006      	movs	r0, #6
 8000774:	f000 f808 	bl	8000788 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000778:	2080      	movs	r0, #128	; 0x80
 800077a:	f000 f805 	bl	8000788 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f802 	bl	8000788 <LCD_WRITE_COMMAND>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000798:	4832      	ldr	r0, [pc, #200]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 800079a:	f000 fa19 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a4:	482f      	ldr	r0, [pc, #188]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 80007a6:	f000 fa13 	bl	8000bd0 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, GPIO_PIN_0, READ_BIT(command, 0));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	2101      	movs	r1, #1
 80007b6:	482b      	ldr	r0, [pc, #172]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 80007b8:	f000 fa0a 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_1, READ_BIT(command, 1));
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	085b      	lsrs	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	461a      	mov	r2, r3
 80007ca:	2102      	movs	r1, #2
 80007cc:	4825      	ldr	r0, [pc, #148]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 80007ce:	f000 f9ff 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_2, READ_BIT(command, 2));
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	089b      	lsrs	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	f003 0301 	and.w	r3, r3, #1
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	2104      	movs	r1, #4
 80007e2:	4820      	ldr	r0, [pc, #128]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 80007e4:	f000 f9f4 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_3, READ_BIT(command, 3));
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	2108      	movs	r1, #8
 80007f8:	481a      	ldr	r0, [pc, #104]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 80007fa:	f000 f9e9 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, READ_BIT(command, 4));
 80007fe:	79fb      	ldrb	r3, [r7, #7]
 8000800:	091b      	lsrs	r3, r3, #4
 8000802:	b2db      	uxtb	r3, r3
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	461a      	mov	r2, r3
 800080c:	2110      	movs	r1, #16
 800080e:	4815      	ldr	r0, [pc, #84]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 8000810:	f000 f9de 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, READ_BIT(command, 5));
 8000814:	79fb      	ldrb	r3, [r7, #7]
 8000816:	095b      	lsrs	r3, r3, #5
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	461a      	mov	r2, r3
 8000822:	2120      	movs	r1, #32
 8000824:	480f      	ldr	r0, [pc, #60]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 8000826:	f000 f9d3 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, READ_BIT(command, 6));
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	099b      	lsrs	r3, r3, #6
 800082e:	b2db      	uxtb	r3, r3
 8000830:	f003 0301 	and.w	r3, r3, #1
 8000834:	b2db      	uxtb	r3, r3
 8000836:	461a      	mov	r2, r3
 8000838:	2140      	movs	r1, #64	; 0x40
 800083a:	480a      	ldr	r0, [pc, #40]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 800083c:	f000 f9c8 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, READ_BIT(command, 7));
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	09db      	lsrs	r3, r3, #7
 8000844:	b2db      	uxtb	r3, r3
 8000846:	461a      	mov	r2, r3
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	4806      	ldr	r0, [pc, #24]	; (8000864 <LCD_WRITE_COMMAND+0xdc>)
 800084c:	f000 f9c0 	bl	8000bd0 <GPIO_WritePin>

	wait_ms(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f7ff fe95 	bl	8000580 <wait_ms>
	LCD_kick();
 8000856:	f7ff feb7 	bl	80005c8 <LCD_kick>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	40010800 	.word	0x40010800

08000868 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	4603      	mov	r3, r0
 8000870:	71fb      	strb	r3, [r7, #7]
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000878:	4832      	ldr	r0, [pc, #200]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 800087a:	f000 f9a9 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800087e:	2201      	movs	r2, #1
 8000880:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000884:	482f      	ldr	r0, [pc, #188]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 8000886:	f000 f9a3 	bl	8000bd0 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, GPIO_PIN_0, READ_BIT(character, 0));
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	2101      	movs	r1, #1
 8000896:	482b      	ldr	r0, [pc, #172]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 8000898:	f000 f99a 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_1, READ_BIT(character, 1));
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	085b      	lsrs	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	461a      	mov	r2, r3
 80008aa:	2102      	movs	r1, #2
 80008ac:	4825      	ldr	r0, [pc, #148]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 80008ae:	f000 f98f 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_2, READ_BIT(character, 2));
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	089b      	lsrs	r3, r3, #2
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	f003 0301 	and.w	r3, r3, #1
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	461a      	mov	r2, r3
 80008c0:	2104      	movs	r1, #4
 80008c2:	4820      	ldr	r0, [pc, #128]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 80008c4:	f000 f984 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_3, READ_BIT(character, 3));
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	08db      	lsrs	r3, r3, #3
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	f003 0301 	and.w	r3, r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	461a      	mov	r2, r3
 80008d6:	2108      	movs	r1, #8
 80008d8:	481a      	ldr	r0, [pc, #104]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 80008da:	f000 f979 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, READ_BIT(character, 4));
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	091b      	lsrs	r3, r3, #4
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	461a      	mov	r2, r3
 80008ec:	2110      	movs	r1, #16
 80008ee:	4815      	ldr	r0, [pc, #84]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 80008f0:	f000 f96e 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, READ_BIT(character, 5));
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	2120      	movs	r1, #32
 8000904:	480f      	ldr	r0, [pc, #60]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 8000906:	f000 f963 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, READ_BIT(character, 6));
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	099b      	lsrs	r3, r3, #6
 800090e:	b2db      	uxtb	r3, r3
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	b2db      	uxtb	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 800091c:	f000 f958 	bl	8000bd0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, READ_BIT(character, 7));
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	09db      	lsrs	r3, r3, #7
 8000924:	b2db      	uxtb	r3, r3
 8000926:	461a      	mov	r2, r3
 8000928:	2180      	movs	r1, #128	; 0x80
 800092a:	4806      	ldr	r0, [pc, #24]	; (8000944 <LCD_WRITE_CHAR+0xdc>)
 800092c:	f000 f950 	bl	8000bd0 <GPIO_WritePin>
	wait_ms(1);
 8000930:	2001      	movs	r0, #1
 8000932:	f7ff fe25 	bl	8000580 <wait_ms>
	LCD_kick();
 8000936:	f7ff fe47 	bl	80005c8 <LCD_kick>


}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010800 	.word	0x40010800

08000948 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	4603      	mov	r3, r0
 8000950:	460a      	mov	r2, r1
 8000952:	71fb      	strb	r3, [r7, #7]
 8000954:	4613      	mov	r3, r2
 8000956:	71bb      	strb	r3, [r7, #6]
	if(line==1 && position>=0 && position<16)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d109      	bne.n	8000972 <LCD_GOTO_XY+0x2a>
 800095e:	79bb      	ldrb	r3, [r7, #6]
 8000960:	2b0f      	cmp	r3, #15
 8000962:	d806      	bhi.n	8000972 <LCD_GOTO_XY+0x2a>
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	3b80      	subs	r3, #128	; 0x80
 8000968:	b2db      	uxtb	r3, r3
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff ff0c 	bl	8000788 <LCD_WRITE_COMMAND>
	}else if(line==2)
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
	}
}
 8000970:	e008      	b.n	8000984 <LCD_GOTO_XY+0x3c>
	}else if(line==2)
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b02      	cmp	r3, #2
 8000976:	d105      	bne.n	8000984 <LCD_GOTO_XY+0x3c>
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 8000978:	79bb      	ldrb	r3, [r7, #6]
 800097a:	3b40      	subs	r3, #64	; 0x40
 800097c:	b2db      	uxtb	r3, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ff02 	bl	8000788 <LCD_WRITE_COMMAND>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b084      	sub	sp, #16
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	int count=0;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
	while(*string!=0)
 8000998:	e01c      	b.n	80009d4 <LCD_WRITE_STRING+0x48>
	{
		count++;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	3301      	adds	r3, #1
 800099e:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	1c5a      	adds	r2, r3, #1
 80009a4:	607a      	str	r2, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff ff5d 	bl	8000868 <LCD_WRITE_CHAR>
		if (count == 16)
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	d104      	bne.n	80009be <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80009b4:	2100      	movs	r1, #0
 80009b6:	2002      	movs	r0, #2
 80009b8:	f7ff ffc6 	bl	8000948 <LCD_GOTO_XY>
 80009bc:	e00a      	b.n	80009d4 <LCD_WRITE_STRING+0x48>
		}else if (count == 32)
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b20      	cmp	r3, #32
 80009c2:	d107      	bne.n	80009d4 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80009c4:	f7ff fdf8 	bl	80005b8 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80009c8:	2100      	movs	r1, #0
 80009ca:	2001      	movs	r0, #1
 80009cc:	f7ff ffbc 	bl	8000948 <LCD_GOTO_XY>
			count=0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
	while(*string!=0)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1de      	bne.n	800099a <LCD_WRITE_STRING+0xe>
		}
	}
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <Get_CRLH_Position>:
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
//	APIs Supported by "MCAL GPIO DRIVER"
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


uint8_t Get_CRLH_Position(uint16_t PinNum){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	80fb      	strh	r3, [r7, #6]
	switch (PinNum) {
 80009ee:	88fb      	ldrh	r3, [r7, #6]
 80009f0:	2b80      	cmp	r3, #128	; 0x80
 80009f2:	d042      	beq.n	8000a7a <Get_CRLH_Position+0x96>
 80009f4:	2b80      	cmp	r3, #128	; 0x80
 80009f6:	dc11      	bgt.n	8000a1c <Get_CRLH_Position+0x38>
 80009f8:	2b08      	cmp	r3, #8
 80009fa:	d036      	beq.n	8000a6a <Get_CRLH_Position+0x86>
 80009fc:	2b08      	cmp	r3, #8
 80009fe:	dc06      	bgt.n	8000a0e <Get_CRLH_Position+0x2a>
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d02e      	beq.n	8000a62 <Get_CRLH_Position+0x7e>
 8000a04:	2b04      	cmp	r3, #4
 8000a06:	d02e      	beq.n	8000a66 <Get_CRLH_Position+0x82>
 8000a08:	2b01      	cmp	r3, #1
 8000a0a:	d028      	beq.n	8000a5e <Get_CRLH_Position+0x7a>
 8000a0c:	e047      	b.n	8000a9e <Get_CRLH_Position+0xba>
 8000a0e:	2b20      	cmp	r3, #32
 8000a10:	d02f      	beq.n	8000a72 <Get_CRLH_Position+0x8e>
 8000a12:	2b40      	cmp	r3, #64	; 0x40
 8000a14:	d02f      	beq.n	8000a76 <Get_CRLH_Position+0x92>
 8000a16:	2b10      	cmp	r3, #16
 8000a18:	d029      	beq.n	8000a6e <Get_CRLH_Position+0x8a>
 8000a1a:	e040      	b.n	8000a9e <Get_CRLH_Position+0xba>
 8000a1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a20:	d033      	beq.n	8000a8a <Get_CRLH_Position+0xa6>
 8000a22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a26:	dc09      	bgt.n	8000a3c <Get_CRLH_Position+0x58>
 8000a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a2c:	d029      	beq.n	8000a82 <Get_CRLH_Position+0x9e>
 8000a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a32:	d028      	beq.n	8000a86 <Get_CRLH_Position+0xa2>
 8000a34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a38:	d021      	beq.n	8000a7e <Get_CRLH_Position+0x9a>
 8000a3a:	e030      	b.n	8000a9e <Get_CRLH_Position+0xba>
 8000a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a40:	d027      	beq.n	8000a92 <Get_CRLH_Position+0xae>
 8000a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a46:	dc03      	bgt.n	8000a50 <Get_CRLH_Position+0x6c>
 8000a48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a4c:	d01f      	beq.n	8000a8e <Get_CRLH_Position+0xaa>
 8000a4e:	e026      	b.n	8000a9e <Get_CRLH_Position+0xba>
 8000a50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a54:	d01f      	beq.n	8000a96 <Get_CRLH_Position+0xb2>
 8000a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000a5a:	d01e      	beq.n	8000a9a <Get_CRLH_Position+0xb6>
 8000a5c:	e01f      	b.n	8000a9e <Get_CRLH_Position+0xba>
	case GPIO_PIN_0:
		return 0;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e01e      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_1:
		return 4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	e01c      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_2:
		return 8;
 8000a66:	2308      	movs	r3, #8
 8000a68:	e01a      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_3:
		return 12;
 8000a6a:	230c      	movs	r3, #12
 8000a6c:	e018      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_4:
		return 16;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	e016      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_5:
		return 20;
 8000a72:	2314      	movs	r3, #20
 8000a74:	e014      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_6:
		return 24;
 8000a76:	2318      	movs	r3, #24
 8000a78:	e012      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_7:
		return 28;
 8000a7a:	231c      	movs	r3, #28
 8000a7c:	e010      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_8:
		return 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e00e      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_9:
		return 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	e00c      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_10:
		return 8;
 8000a86:	2308      	movs	r3, #8
 8000a88:	e00a      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_11:
		return 12;
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	e008      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_12:
		return 16;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	e006      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_13:
		return 20;
 8000a92:	2314      	movs	r3, #20
 8000a94:	e004      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_14:
		return 24;
 8000a96:	2318      	movs	r3, #24
 8000a98:	e002      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;

	case GPIO_PIN_15:
		return 28;
 8000a9a:	231c      	movs	r3, #28
 8000a9c:	e000      	b.n	8000aa0 <Get_CRLH_Position+0xbc>
		break;
	}
	return 0;
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <GPIO_Init>:
* Note			-Stm32F103x8 MCU has GPIO A,B,C,D,E Modules
*/


void GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PIN_Config* PinConfig )
{
 8000aaa:	b590      	push	{r4, r7, lr}
 8000aac:	b085      	sub	sp, #20
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	// Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15
	volatile uint32_t* ConfigReg = NULL ;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
	volatile uint8_t Config_PIN = 0 ;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	72fb      	strb	r3, [r7, #11]

	ConfigReg =(PinConfig->pin_number < GPIO_PIN_8 )? &GPIOx->CRL : &GPIOx->CRH ;
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	2bff      	cmp	r3, #255	; 0xff
 8000ac2:	d801      	bhi.n	8000ac8 <GPIO_Init+0x1e>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	e001      	b.n	8000acc <GPIO_Init+0x22>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3304      	adds	r3, #4
 8000acc:	60fb      	str	r3, [r7, #12]

	// Clear CNF & MODE
	(*ConfigReg) &= ~(0xF <<Get_CRLH_Position(PinConfig->pin_number)) ;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	881b      	ldrh	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ff86 	bl	80009e4 <Get_CRLH_Position>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	230f      	movs	r3, #15
 8000ade:	4093      	lsls	r3, r2
 8000ae0:	43da      	mvns	r2, r3
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	601a      	str	r2, [r3, #0]

	// PIN is Output
	if((PinConfig->pin_mode == GPIO_MODE_Output_PUSH_PULL) || (PinConfig->pin_mode == GPIO_MODE_Output_OPEN_DRAIN) ||(PinConfig->pin_mode == GPIO_MODE_Output_AF_PUSH_PULL) ||(PinConfig->pin_mode == GPIO_MODE_Output_AF_OPEN_DRAIN))
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	885b      	ldrh	r3, [r3, #2]
 8000af0:	2b04      	cmp	r3, #4
 8000af2:	d00b      	beq.n	8000b0c <GPIO_Init+0x62>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	885b      	ldrh	r3, [r3, #2]
 8000af8:	2b05      	cmp	r3, #5
 8000afa:	d007      	beq.n	8000b0c <GPIO_Init+0x62>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	885b      	ldrh	r3, [r3, #2]
 8000b00:	2b06      	cmp	r3, #6
 8000b02:	d003      	beq.n	8000b0c <GPIO_Init+0x62>
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	885b      	ldrh	r3, [r3, #2]
 8000b08:	2b07      	cmp	r3, #7
 8000b0a:	d10f      	bne.n	8000b2c <GPIO_Init+0x82>
	{
		// Set CNF & MODE
		Config_PIN = ((((PinConfig->pin_mode -4 ) << 2) | (PinConfig->pin_speed)) & 0xF);
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	3b04      	subs	r3, #4
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	b25a      	sxtb	r2, r3
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	889b      	ldrh	r3, [r3, #4]
 8000b1a:	b25b      	sxtb	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b25b      	sxtb	r3, r3
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	72fb      	strb	r3, [r7, #11]
 8000b2a:	e026      	b.n	8000b7a <GPIO_Init+0xd0>

	}
	else //PIN is Input
	{
		// Input Analog || Input floating
		if((PinConfig->pin_mode == GPIO_MODE_Analog) || (PinConfig->pin_mode == GPIO_MODE_Floating_Input))
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d003      	beq.n	8000b3c <GPIO_Init+0x92>
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	885b      	ldrh	r3, [r3, #2]
 8000b38:	2b01      	cmp	r3, #1
 8000b3a:	d108      	bne.n	8000b4e <GPIO_Init+0xa4>
		{
			// Set CNF & MODE
			Config_PIN = ((PinConfig->pin_mode << 2) & 0xF) ;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	885b      	ldrh	r3, [r3, #2]
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f003 030f 	and.w	r3, r3, #15
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	72fb      	strb	r3, [r7, #11]
 8000b4c:	e015      	b.n	8000b7a <GPIO_Init+0xd0>
		}
		else // Input pull-down || Input pull-up
		{
			// Set CNF & MODE
			Config_PIN = ((GPIO_MODE_Input_PUll_UP << 2) & 0xF) ;
 8000b4e:	2308      	movs	r3, #8
 8000b50:	72fb      	strb	r3, [r7, #11]

			if(PinConfig->pin_mode == GPIO_MODE_Input_PUll_DOWN)// Input pull-down
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	885b      	ldrh	r3, [r3, #2]
 8000b56:	2b03      	cmp	r3, #3
 8000b58:	d108      	bne.n	8000b6c <GPIO_Init+0xc2>
			{
				//PxODR = 0 Input pull-down :Table 20. Port bit configuration table
				GPIOx->ODR &= ~( PinConfig->pin_number ) ;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	683a      	ldr	r2, [r7, #0]
 8000b60:	8812      	ldrh	r2, [r2, #0]
 8000b62:	43d2      	mvns	r2, r2
 8000b64:	401a      	ands	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	e006      	b.n	8000b7a <GPIO_Init+0xd0>
			}
			else // Input pull-up
			{
				//PxODR = 1 Input pull-up :Table 20. Port bit configuration table
				GPIOx->ODR |=  PinConfig->pin_number ;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	683a      	ldr	r2, [r7, #0]
 8000b72:	8812      	ldrh	r2, [r2, #0]
 8000b74:	431a      	orrs	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	60da      	str	r2, [r3, #12]
			}
		}
	}

	// write on the CRL or CRH
	*ConfigReg |= (Config_PIN <<Get_CRLH_Position(PinConfig->pin_number));
 8000b7a:	7afb      	ldrb	r3, [r7, #11]
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461c      	mov	r4, r3
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff2d 	bl	80009e4 <Get_CRLH_Position>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	fa04 f203 	lsl.w	r2, r4, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	431a      	orrs	r2, r3
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	601a      	str	r2, [r3, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}

08000ba2 <GPIO_ReadPin>:
* Note			-none
*/


uint8_t GPIO_ReadPin (GPIO_TypeDef *GPIOx, uint16_t PinNumber )
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b085      	sub	sp, #20
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	807b      	strh	r3, [r7, #2]
	uint8_t bitstatus ;
	if((( GPIOx->IDR ) & PinNumber) != (uint32_t)GPIO_PIN_RESET )
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	689a      	ldr	r2, [r3, #8]
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d002      	beq.n	8000bc0 <GPIO_ReadPin+0x1e>
	{
		bitstatus = GPIO_PIN_SET ;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e001      	b.n	8000bc4 <GPIO_ReadPin+0x22>
	}
	else
	{
		bitstatus = GPIO_PIN_RESET ;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]
	}
	return bitstatus ;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bc80      	pop	{r7}
 8000bce:	4770      	bx	lr

08000bd0 <GPIO_WritePin>:
* @retval 		-none
* Note			-none
*/

void GPIO_WritePin (GPIO_TypeDef *GPIOx, uint16_t PinNumber , uint8_t Value )
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	460b      	mov	r3, r1
 8000bda:	807b      	strh	r3, [r7, #2]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	707b      	strb	r3, [r7, #1]
	if( Value == GPIO_PIN_SET)
 8000be0:	787b      	ldrb	r3, [r7, #1]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d103      	bne.n	8000bee <GPIO_WritePin+0x1e>
	{
	// Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
	// These bits are write-only and can be accessed in Word mode only.
	// 0: No action on the corresponding ODRx bit
	// 1: Set the corresponding ODRx bit
		GPIOx->BSRR =(uint32_t)PinNumber ;
 8000be6:	887a      	ldrh	r2, [r7, #2]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	611a      	str	r2, [r3, #16]
	// These bits are write-only and can be accessed in Word mode only.
	// 0: No action on the corresponding ODRx bit
	// 1: Reset the corresponding ODRx bit
		GPIOx->BRR =(uint16_t)PinNumber ;
	}
}
 8000bec:	e002      	b.n	8000bf4 <GPIO_WritePin+0x24>
		GPIOx->BRR =(uint16_t)PinNumber ;
 8000bee:	887a      	ldrh	r2, [r7, #2]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	615a      	str	r2, [r3, #20]
}
 8000bf4:	bf00      	nop
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr

08000bfe <GPIO_WritePort>:
* @retval 		-none
* Note			-none
*/

void GPIO_WritePort (GPIO_TypeDef *GPIOx, uint16_t Value )
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	460b      	mov	r3, r1
 8000c08:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value ;
 8000c0a:	887a      	ldrh	r2, [r7, #2]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	60da      	str	r2, [r3, #12]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
	...

08000c1c <__libc_init_array>:
 8000c1c:	b570      	push	{r4, r5, r6, lr}
 8000c1e:	2500      	movs	r5, #0
 8000c20:	4e0c      	ldr	r6, [pc, #48]	; (8000c54 <__libc_init_array+0x38>)
 8000c22:	4c0d      	ldr	r4, [pc, #52]	; (8000c58 <__libc_init_array+0x3c>)
 8000c24:	1ba4      	subs	r4, r4, r6
 8000c26:	10a4      	asrs	r4, r4, #2
 8000c28:	42a5      	cmp	r5, r4
 8000c2a:	d109      	bne.n	8000c40 <__libc_init_array+0x24>
 8000c2c:	f000 f81a 	bl	8000c64 <_init>
 8000c30:	2500      	movs	r5, #0
 8000c32:	4e0a      	ldr	r6, [pc, #40]	; (8000c5c <__libc_init_array+0x40>)
 8000c34:	4c0a      	ldr	r4, [pc, #40]	; (8000c60 <__libc_init_array+0x44>)
 8000c36:	1ba4      	subs	r4, r4, r6
 8000c38:	10a4      	asrs	r4, r4, #2
 8000c3a:	42a5      	cmp	r5, r4
 8000c3c:	d105      	bne.n	8000c4a <__libc_init_array+0x2e>
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
 8000c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c44:	4798      	blx	r3
 8000c46:	3501      	adds	r5, #1
 8000c48:	e7ee      	b.n	8000c28 <__libc_init_array+0xc>
 8000c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c4e:	4798      	blx	r3
 8000c50:	3501      	adds	r5, #1
 8000c52:	e7f2      	b.n	8000c3a <__libc_init_array+0x1e>
 8000c54:	08000cb0 	.word	0x08000cb0
 8000c58:	08000cb0 	.word	0x08000cb0
 8000c5c:	08000cb0 	.word	0x08000cb0
 8000c60:	08000cb4 	.word	0x08000cb4

08000c64 <_init>:
 8000c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c66:	bf00      	nop
 8000c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c6a:	bc08      	pop	{r3}
 8000c6c:	469e      	mov	lr, r3
 8000c6e:	4770      	bx	lr

08000c70 <_fini>:
 8000c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c72:	bf00      	nop
 8000c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c76:	bc08      	pop	{r3}
 8000c78:	469e      	mov	lr, r3
 8000c7a:	4770      	bx	lr
