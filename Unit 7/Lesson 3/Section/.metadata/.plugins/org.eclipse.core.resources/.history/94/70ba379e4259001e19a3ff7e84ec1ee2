/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Ziad Mahmoud Saad
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include "Stm32F103x6.h"
#include "Stm32F103C6_GPIO_Driver.h"
#include "lcd.h"
#include "KEYPAD.h"

#define ZERO 0x01
#define ONE 0x79
#define TWO 0x24
#define THREE 0x30
#define FOUR 0x4C
#define FIVE 0x12
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10

void clock_init() ;
void GPIO_init();


int main(void)
{
	clock_init();
	GPIO_init();
	LCD_init();
	unsigned char pressed;
	LCD_WRITE_STRING("Hey there");
	wait_ms(500);
	LCD_clear_screen();
	uint8_t seg[]={ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE};
	uint8_t lcd[]={'0','1','2','3','4','5','6','7','8','9'};

	for(uint8_t i=0;i<10;i++)
	{
		GPIO_WritePort(GPIOB,seg[i]<<9);
		LCD_WRITE_CHAR(lcd[i]);
		wait_ms(500);
	}
	LCD_clear_screen();
	Keypad_init();
	LCD_WRITE_STRING("Keypad is ready");
	wait_ms(500);
	LCD_clear_screen();
    while (1)
    {
		pressed=Keypad_getkey();
		switch(pressed)
		{
			case 'A':
			break;
			case '?':
				LCD_clear_screen();
			break;
			default:
			LCD_WRITE_CHAR(pressed);
			break;
		}
		wait_ms(10);
    }
}

void clock_init()
{
	RCC_GPIOA_CLK_EN();
	RCC_GPIOB_CLK_EN();
}

void GPIO_init()
{
	GPIO_PIN_Config PINConf ;
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	PINConf.pin_number = GPIO_PIN_9 ;
	GPIO_Init(GPIOB, &PINConf) ;

	PINConf.pin_number = GPIO_PIN_10 ;
	GPIO_Init(GPIOB, &PINConf) ;

	PINConf.pin_number = GPIO_PIN_11 ;
	GPIO_Init(GPIOB, &PINConf) ;

	PINConf.pin_number = GPIO_PIN_12 ;
	GPIO_Init(GPIOB, &PINConf) ;

	PINConf.pin_number = GPIO_PIN_13 ;
	GPIO_Init(GPIOB, &PINConf) ;

	PINConf.pin_number = GPIO_PIN_14 ;
	GPIO_Init(GPIOB, &PINConf) ;
	PINConf.pin_number = GPIO_PIN_15 ;
	GPIO_Init(GPIOB, &PINConf) ;

}
