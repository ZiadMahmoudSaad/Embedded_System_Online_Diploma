/*
 * LCD.c
 *
 *  Created on: Sep 22, 2023
 *      Author: Ziad Mahmoud Saad
 */

#include "LCD.h"

void wait_ms(uint32_t time) {
	uint32_t i, j;
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++);
}

uint8_t Get_command_status(unsigned char command,uint16_t PinNumber)
{
	if(command & PinNumber)
	{
		return GPIO_PIN_SET ;
	}else
	{
		return GPIO_PIN_RESET ;
	}
}
void LCD_clear_screen(void)
{
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN)	;
}

void LCD_kick(){

	//LCD_CTRL |= (1 << EN_SWITCH);
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET) ;

	wait_ms(5);
	//LCD_CTRL &= ~(1 << EN_SWITCH);
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;

}


void LCD_GPIO_init()
{
	//LCD_CTRL_DATADir |=(1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH) ;
	//EN_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = EN_SWITCH ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_CTRL, &PINConf) ;
	//RW_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = RW_SWITCH ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_CTRL, &PINConf) ;
	//RS_switch Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = RS_SWITCH ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_CTRL, &PINConf) ;

	//LCD_CTRL &=~((1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH)) ;
	GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET) ;
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET) ;
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET) ;

	//LCD_DATA_DATADir = 0xFF ;
	//DATA_PINS are Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_0 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_1 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_2 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_3 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_4 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_5 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_6 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_7 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;
}

void LCD_init()
{
	wait_ms(20);

	LCD_GPIO_init();
	wait_ms(15);
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);

	#ifdef EIGHT_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
	#endif

	#ifdef FOUR_BIT_MODE
		LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}

void LCD_isbusy()
{
	//LCD_DATA_DATADir &= ~(0xFF<<DATA_SHIFT);
#ifdef EIGHT_BIT_MODE
	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_0 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_1 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_2 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_3 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_4 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_5 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_6 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_7 ;
	GPIO_Init(LCD_PORT, &PINConf) ;
#endif

#ifdef FOUR_BIT_MODE
	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_4 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_5 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_6 ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Floating_Input ;
	PINConf.pin_number = GPIO_PIN_7 ;
	GPIO_Init(LCD_PORT, &PINConf) ;
#endif


	//======================================
	//LCD_CTRL |= 1<<RW_SWITCH ;
	//LCD_CTRL &= ~(1<<RS_SWITCH);
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_SET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
	LCD_kick();

	//LCD_DATA_DATADir |= (0xFF<<DATA_SHIFT);
#ifdef EIGHT_BIT_MODE
	//DATA_PINS are Output
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_0 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_1 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_2 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_3 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_4 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_5 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_6 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_7 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;
#endif

#ifdef FOUR_BIT_MODE
	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_4 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_5 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_6 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;

	PINConf.pin_mode = GPIO_MODE_Output_PUSH_PULL ;
	PINConf.pin_number = GPIO_PIN_7 ;
	PINConf.pin_speed = GPIO_SPEED_10MHz ;
	GPIO_Init(LCD_PORT, &PINConf) ;
#endif

	//LCD_CTRL &= ~(1 << RW_SWITCH);
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
}

void LCD_WRITE_COMMAND(unsigned char command)
{
	LCD_isbusy();
#ifdef EIGHT_BIT_MODE

	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);

	//LCD_DATA = command ;
	GPIO_WritePort(LCD_PORT, command) ;

	wait_ms(1);
	LCD_kick();
#endif

#ifdef FOUR_BIT_MODE

	//LCD_DATA =  (LCD_DATA & 0x0F) | (command & 0xF0) ;


	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
	//GPIO_WritePort(LCD_PORT , (command & 0xF0)) ;
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, Get_command_status(command, GPIO_PIN_4));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, Get_command_status(command, GPIO_PIN_5));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, Get_command_status(command, GPIO_PIN_6));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, Get_command_status(command, GPIO_PIN_7));
	wait_ms(1);
	LCD_kick();


	//LCD_DATA =  (LCD_DATA & 0x0F) | (command << 4) ;
	//GPIO_WritePort(LCD_PORT , ((command & 0x0F) << 4)) ;
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, Get_command_status((command << 4), GPIO_PIN_4));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, Get_command_status((command << 4), GPIO_PIN_5));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, Get_command_status((command << 4), GPIO_PIN_6));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, Get_command_status((command << 4), GPIO_PIN_7));
	wait_ms(1);
	LCD_kick();
#endif


}

void LCD_WRITE_CHAR(unsigned char character)
{
	LCD_isbusy();
#ifdef EIGHT_BIT_MODE
	//LCD_CTRL |= 1<<RS_SWITCH ;
	//LCD_DATA = character ;
	GPIO_WritePort(LCD_PORT, character) ;

	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);

	wait_ms(1);
	LCD_kick();
#endif

#ifdef FOUR_BIT_MODE

	//LCD_CTRL |= 1<<RS_SWITCH ;
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
	//LCD_DATA =  (LCD_DATA & 0x0F) | (character & 0xF0) ;
	//GPIO_WritePort(LCD_PORT , (RS_SWITCH|(character & 0xF0))) ;
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, Get_command_status(character, GPIO_PIN_4));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, Get_command_status(character, GPIO_PIN_5));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, Get_command_status(character, GPIO_PIN_6));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, Get_command_status(character, GPIO_PIN_7));


	wait_ms(2);
	LCD_kick();

	//LCD_isbusy();
	//LCD_DATA =  (LCD_DATA & 0x0F) | (character << 4) ;
	//GPIO_WritePort(LCD_PORT, (RS_SWITCH|((character & 0x0F)<< 4))) ;
	GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
	GPIO_WritePin(LCD_PORT, GPIO_PIN_4, Get_command_status((character << 4), GPIO_PIN_4));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_5, Get_command_status((character << 4), GPIO_PIN_5));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_6, Get_command_status((character << 4), GPIO_PIN_6));
	GPIO_WritePin(LCD_PORT, GPIO_PIN_7, Get_command_status((character << 4), GPIO_PIN_7));

	wait_ms(1);
	LCD_kick();

#endif
}

void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if(line==1 && position>=0 && position<16)
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
	}else if(line==2)
	{
		LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
	}
}

void LCD_WRITE_STRING(char* string)
{
	int count=0;
	while(*string!=0)
	{
		count++;
		LCD_WRITE_CHAR(*string++);
		if (count == 16)
		{
			LCD_GOTO_XY(2,0);
		}else if (count == 32)
		{
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count=0;
		}
	}
}
