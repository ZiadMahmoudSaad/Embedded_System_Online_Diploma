
Lab3_ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c8  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002cd  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b8  00000000  00000000  00001190  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035c  00000000  00000000  00001248  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_1>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_2>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 43 00 	call	0x86	; 0x86 <main>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <interrupt_init>:
#define GIFR_R *((volatile unsigned char*)(IO_BASE+0x3A))
#define SREG_R *((volatile unsigned char*)(IO_BASE+0x3F))

void interrupt_init()
{
	MCUCR_R	|=(0b1101<<0);
  6c:	85 b7       	in	r24, 0x35	; 53
  6e:	8d 60       	ori	r24, 0x0D	; 13
  70:	85 bf       	out	0x35, r24	; 53
	MCUCSR_R	&=~(0b1<<6);
  72:	84 b7       	in	r24, 0x34	; 52
  74:	8f 7b       	andi	r24, 0xBF	; 191
  76:	84 bf       	out	0x34, r24	; 52
	
	GICR_R	|=(0b111<<5);
  78:	8b b7       	in	r24, 0x3b	; 59
  7a:	80 6e       	ori	r24, 0xE0	; 224
  7c:	8b bf       	out	0x3b, r24	; 59
	SREG_R |= 1<<7;
  7e:	8f b7       	in	r24, 0x3f	; 63
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8f bf       	out	0x3f, r24	; 63
  84:	08 95       	ret

00000086 <main>:
	
}

int main(void)
{
	interrupt_init();
  86:	0e 94 36 00 	call	0x6c	; 0x6c <interrupt_init>
	DDRD |= (0b111<<5) ; 
  8a:	81 b3       	in	r24, 0x11	; 17
  8c:	80 6e       	ori	r24, 0xE0	; 224
  8e:	81 bb       	out	0x11, r24	; 17
    while(1)
	{
		PORTD &= ~(0b111<<5);
  90:	82 b3       	in	r24, 0x12	; 18
  92:	8f 71       	andi	r24, 0x1F	; 31
  94:	82 bb       	out	0x12, r24	; 18
  96:	fc cf       	rjmp	.-8      	; 0x90 <main+0xa>

00000098 <__vector_1>:
	}
}

ISR(INT0_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	2f 93       	push	r18
  a4:	8f 93       	push	r24
  a6:	9f 93       	push	r25
	PORTD |= 1<<5;
  a8:	82 b3       	in	r24, 0x12	; 18
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2f ef       	ldi	r18, 0xFF	; 255
  b0:	80 e7       	ldi	r24, 0x70	; 112
  b2:	92 e0       	ldi	r25, 0x02	; 2
  b4:	21 50       	subi	r18, 0x01	; 1
  b6:	80 40       	sbci	r24, 0x00	; 0
  b8:	90 40       	sbci	r25, 0x00	; 0
  ba:	e1 f7       	brne	.-8      	; 0xb4 <__vector_1+0x1c>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <__vector_1+0x26>
  be:	00 00       	nop
	_delay_ms(100);
}
  c0:	9f 91       	pop	r25
  c2:	8f 91       	pop	r24
  c4:	2f 91       	pop	r18
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_2>:

ISR(INT1_vect)
{
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	2f 93       	push	r18
  dc:	8f 93       	push	r24
  de:	9f 93       	push	r25
	PORTD |= 1<<6;
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	80 e7       	ldi	r24, 0x70	; 112
  ea:	92 e0       	ldi	r25, 0x02	; 2
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <__vector_2+0x1c>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <__vector_2+0x26>
  f6:	00 00       	nop
	_delay_ms(100);
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	2f 91       	pop	r18
  fe:	0f 90       	pop	r0
 100:	0f be       	out	0x3f, r0	; 63
 102:	0f 90       	pop	r0
 104:	1f 90       	pop	r1
 106:	18 95       	reti

00000108 <__vector_3>:

ISR(INT2_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	8f 93       	push	r24
 116:	9f 93       	push	r25
	PORTD |= 1<<7 ;
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	80 68       	ori	r24, 0x80	; 128
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <__vector_3+0x1c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <__vector_3+0x26>
 12e:	00 00       	nop
	_delay_ms(100);

 130:	9f 91       	pop	r25
 132:	8f 91       	pop	r24
 134:	2f 91       	pop	r18
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
